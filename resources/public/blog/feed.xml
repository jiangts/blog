<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://jiangts.github.io/blog' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
jiangts
</title>
<link>
http://jiangts.github.io/blog
</link>
<description>

</description>
<lastBuildDate>
Sun, 09 Aug 2015 17:06:43 -0700
</lastBuildDate>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-6-clojure-algo.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-6-clojure-algo.html
</link>
<title>
Clojure Recursive Backtracking
</title>
<description>
&lt;p&gt;I recently shadowed an interview with the following interview question:&lt;/p&gt;&lt;p&gt;Suppose you are given a vector of strings, such as&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;&amp;quot;t&amp;#42;itt&amp;#42;r&amp;quot; &amp;quot;&amp;#42;s&amp;quot; &amp;quot;&amp;#42;wesome&amp;quot;&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; a &quot;bag o' characters&quot;, such as&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; and a list of valid words, such as the ones found in &lt;code&gt;/usr/dict/words&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Your task is to find &lt;strong&gt;all&lt;/strong&gt; the ways to replace the &lt;code&gt;&amp;#42;&lt;/code&gt; characters (in the vector of strings) with ones from the bag o' characters to create valid words. Each character in the &quot;bag&quot; can only be used once.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Before you continue&lt;/strong&gt;: try solving this on your own (even though I've given away that it's backtracking recursion)! It's a cute little problem. Also, the rest of the post is written with the assumption that you've given the problem some thought, so...&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;journey&amp;#95;to&amp;#95;a&amp;#95;solution&quot;&gt;&lt;/a&gt;Journey to a Solution&lt;/h3&gt;&lt;p&gt;Upon hearing this problem and trying to solve it during the interview, I was dismayed to realize that I essentially forgot recursive backtracking from fall quarter of freshman year and had to re-work it out afterwards. In particular, I thought during the interview that the recursive function needed to be able to &quot;undo&quot; state.&lt;/p&gt;&lt;p&gt;Anyways, upon hearing the problem, I decided to implement a solution in Clojure, because&lt;/p&gt;&lt;ol&gt;&lt;li&gt;I'm trying to learn this language&lt;/li&gt;&lt;li&gt;It seemed like a great tool to solve this type of problem cleanly&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So, I went back to my desk and fired up a new Clojure project and tried to work it out.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;The first thing I did was generate a trie from the words for fast prefix checking as that'll obviously prune the possibilities down quite a bit. This wasn't really in the scope of the interview so I just found an implementation of building tries on &lt;a href='stackoverflow.com/questions/1452680/clojure-how-to-generate-a-trie'&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns yang.trie
  &amp;#40;:gen-class&amp;#41;&amp;#41;

&amp;#40;defn add-to-trie &amp;#91;trie x&amp;#93;
  &amp;#40;assoc-in trie x &amp;#40;merge &amp;#40;get-in trie x&amp;#41;  
                          {:val x :terminal true}&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn in-trie? &amp;#91;trie x&amp;#93;
  &amp;quot;Returns true if x exists in the trie&amp;quot;
  &amp;#40;:terminal &amp;#40;get-in trie x&amp;#41; false&amp;#41;&amp;#41;

&amp;#40;defn has-prefix? &amp;#91;trie prefix&amp;#93;
  &amp;quot;Returns whether the prefix exists in the trie&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; prefix
       &amp;#40;get-in trie&amp;#41;
       nil?
       not&amp;#41;&amp;#41;

&amp;#40;defn prefix-matches &amp;#91;trie prefix&amp;#93;
  &amp;quot;Returns a list of all words in the trie with the prefix&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; prefix
       &amp;#40;get-in trie&amp;#41;
       &amp;#40;tree-seq map? vals&amp;#41;
       &amp;#40;map :val&amp;#41;
       &amp;#40;remove nil?&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn build-trie &amp;#91;coll&amp;#93;
  &amp;quot;Builds a trie over the values in the specified seq coll&amp;quot;
  &amp;#40;reduce add-to-trie {} coll&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And to actually build the trie:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn build-lexicon &amp;#91;file&amp;#93;
  &amp;#40;-&amp;gt; file
      slurp
      string/split-lines
      trie/build-trie&amp;#41;&amp;#41; ; so readable!

&amp;#40;defonce lexicon &amp;#40;build-lexicon &amp;quot;/usr/share/dict/words&amp;quot;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now it's time to start recursive backtracking to find all the solutions (if any). On my first pass at a Clojure solution, I made a couple of bad decisions and made my life difficult.&lt;/p&gt;&lt;p&gt;The problems were two-fold. First of all, I got the wrong idea by choosing the wrong data structure. &lt;strong&gt;This was a huge lesson learned: choosing the right data structure, especially in Clojure, is absolutely critical.&lt;/strong&gt; When people say that programming Clojure will make you a better programmer in general, I think this is one of the things they're referring to. Clojure really makes you realize that in order to keep your life simple and sane,  it's generally the case that &lt;strong&gt;data is more important than functions&lt;/strong&gt;. That's because coaxing data back and forth between formats due to poor data structure choice is annoying, introduces a ton of opportunities for bugs, and is not even core to the algorithmic complexity of the problem.&lt;/p&gt;&lt;p&gt;Secondly, I really wasn't familiar enough with the Clojure control structures and data manipulation functions. So I had to spend a lot of time surfing the docs  to try to figure out how to shovel my data around to do what I wanted.&lt;/p&gt;&lt;p&gt;So what was my not-so-bright data structure? I thought it would be convenient to immediately decimate all the &lt;code&gt;&amp;#42;&lt;/code&gt; characters by splitting each string in the vector by &lt;code&gt;&amp;#42;&lt;/code&gt;. In code,&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;map #&amp;#40;string/split % #&amp;quot;\&amp;#42;&amp;quot;&amp;#41; words&amp;#41;
;=&amp;gt; &amp;#40;&amp;#91;&amp;quot;t&amp;quot; &amp;quot;itt&amp;quot; &amp;quot;r&amp;quot;&amp;#93; &amp;#91;&amp;quot;&amp;quot; &amp;quot;s&amp;quot;&amp;#93; &amp;#91;&amp;quot;&amp;quot; &amp;quot;wesome&amp;quot;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; However, as a beginner in Clojure, dealing with the vectors nested in the list gave me a lot of headaches. Even worse, I also didn't actually know exactly what &lt;code&gt;string/split&lt;/code&gt; did, so when I toiled my way to a first solution and tried to test a case with adjacent &lt;code&gt;&amp;#42;&lt;/code&gt;'s, the output was literally just wrong.&lt;/p&gt;&lt;p&gt;Let's see how bad this was. First, consider the final function I wrote that does the recursive backtracking.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn solve &amp;#91;words chars-remaining&amp;#93;
  &amp;quot;words: vector of strings
  chars-remaining: map from characters to frequencies&amp;quot;
  &amp;#40;if &amp;#40;solved? words&amp;#41;
    &amp;#40;apply println words&amp;#41;
    &amp;#40;doseq &amp;#91;ch &amp;#40;keys chars-remaining&amp;#41;&amp;#93; ;the side effect is the possible println in the recursion
      &amp;#40;if &amp;#40;is-prefix? words ch&amp;#41;
        &amp;#40;solve &amp;#40;replace-char words ch&amp;#41;
               &amp;#40;remove-char chars-remaining ch&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that we need:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;solved&lt;/code&gt;: a fn to check if the words vector has been solved (updated such that each string it contains is a valid word)&lt;/li&gt;&lt;li&gt;&lt;code&gt;is-prefix?&lt;/code&gt;: a fn to check if inserting a character at the next available &lt;code&gt;&amp;#42;&lt;/code&gt; results in a valid prefix&lt;/li&gt;&lt;li&gt;&lt;code&gt;replace-char&lt;/code&gt;: a fn to actually insert a character at the next available &lt;code&gt;&amp;#42;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;remove-char&lt;/code&gt;: a fn to remove a char from the frequency map of remaining characters&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Besides the fact that it took me awhile to figure out that all I needed for backtracking recursion was the above logical structure (no undo necessary) the hardest part of using the string split data-structure was implementing functions 2 and 3.&lt;/p&gt;&lt;p&gt;As an example of how my code looked when using the wrong datastructure, here's how I tried to do part of fn 3 the first time around. Notice that it doesn't even look for the first instance of a word that has a &lt;code&gt;&amp;#42;&lt;/code&gt;. The function's just trying to replace a &lt;code&gt;&amp;#42;&lt;/code&gt; with a character:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn stitch &amp;#91;word-frag ch&amp;#93;
  &amp;#40;if &amp;#40;&amp;gt; &amp;#40;count word-frag&amp;#41; 1&amp;#41;
    &amp;#40;assoc
      &amp;#40;-&amp;gt; word-frag rest vec&amp;#41;
      0
      &amp;#40;str &amp;#40;word-frag 0&amp;#41; ch &amp;#40;word-frag 1&amp;#41; ; absolutely disgusting
    word-frag&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here's how I tried to do fn 1:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn solved? &amp;#91;words&amp;#93;
  &amp;#40;reduce &amp;#40;fn &amp;#91;truth &amp;#91;next-word&amp;#93;&amp;#93; ;at least I used destructuring...
              &amp;#40;and &amp;#40;trie/in-trie? lexicon next-word&amp;#41; truth&amp;#41;
          true words&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Look away, look away. These are absolutely disgusting. The usage of the threading macro (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is pretty cringe-worthy, and the whole thing is a mess. Notice also that there is a lot of poop shovelling to be done to &quot;clear out&quot; the first two elements of the word fragment vector and prepend the joined string. (or, as in my implementation above, chop off the first element and replace the second with the joined string). The poor data structure choice just makes life so unclean.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;solved?&lt;/code&gt; function also suffers from the data structure choice.  As a side note, using &lt;code&gt;reduce&lt;/code&gt; there works, but is pretty jank.&lt;/p&gt;&lt;p&gt;My first bug-ridden implementation had plenty more atrocities, but to spare you and to save my face, we'll move on to my second pass solution, which is quite clean and was quick to write.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;clean&amp;#95;solution&quot;&gt;&lt;/a&gt;The Clean Solution&lt;/h3&gt;&lt;p&gt;As discussed, we just need to implement 4 functions to get this algo working. &lt;code&gt;solved?&lt;/code&gt;, &lt;code&gt;is-prefix&lt;/code&gt;, &lt;code&gt;replace-char&lt;/code&gt;, and &lt;code&gt;remove-char&lt;/code&gt;. For the clean solution, I'll just leave the vector of words be, with &lt;code&gt;&amp;#42;&lt;/code&gt;s and all. Here are the functions one by one.&lt;/p&gt;&lt;p&gt;1) &lt;code&gt;solved?&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- solved? &amp;#91;words&amp;#93;
  &amp;quot;words: a vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words 
       &amp;#40;map #&amp;#40;trie/in-trie? lexicon %&amp;#41;&amp;#41;
       &amp;#40;every? true?&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Wowzers that's so much better! I just map the values of the words to a vector of booleans, and return true if every value is true!&lt;/p&gt;&lt;p&gt;2) &lt;code&gt;replace-char&lt;/code&gt; (this is actually required by &lt;code&gt;is-prefix?&lt;/code&gt; so I'll show it first)&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- replace-char &amp;#91;words ch&amp;#93;
  &amp;quot;words: a vector of strings
  ch: a character&amp;quot;
  &amp;#40;if-let &amp;#91;word-idx &amp;#40;find-word-with-missing words&amp;#41;&amp;#93; ; continue when word-idx not nil
    &amp;#40;let &amp;#91;word &amp;#40;nth words word-idx&amp;#41;&amp;#93;
      &amp;#40;assoc words 
             word-idx
             &amp;#40;string/replace-first word &amp;quot;&amp;#42;&amp;quot; ch&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Here, we get the index of the word with a missing character (using &lt;code&gt;find-word-with-missing&lt;/code&gt;, which I'll define below), grab that word from the word vector, and replace the &lt;code&gt;&amp;#42;&lt;/code&gt; in that word with &lt;code&gt;ch&lt;/code&gt; using the built-in &lt;code&gt;string/replace-first&lt;/code&gt;. Super simple!&lt;/p&gt;&lt;p&gt;And here's &lt;code&gt;find-word-with-missing&lt;/code&gt;:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- find-word-with-missing &amp;#91;words&amp;#93;
  &amp;quot;words: a vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words
      &amp;#40;util/indices #&amp;#40;util/substring? % &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41;
      first&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; it simply returns the index of the first word that contains &lt;code&gt;&amp;#42;&lt;/code&gt; as a substring. (There are actually 2 additional helper methods used here, which are)&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;; in namespace yang.util

&amp;#40;defn substring? &amp;#91;st sub&amp;#93;
  &amp;#40;not= &amp;#40;.indexOf st sub&amp;#41; -1&amp;#41;&amp;#41; ;know your Java strings!
  
&amp;#40;defn indices &amp;#91;pred coll&amp;#93;
  &amp;#40;keep-indexed #&amp;#40;when &amp;#40;pred %2&amp;#41; %1&amp;#41; coll&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;3) &lt;code&gt;is-prefix?&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- is-prefix? &amp;#91;words ch&amp;#93;
  &amp;quot;words: vector of strings
  ch: character&amp;quot;
  &amp;#40;if-let &amp;#91;check-idx &amp;#40;find-word-with-missing words&amp;#41;&amp;#93;
    &amp;#40;let &amp;#91;replaced-char &amp;#40;replace-char words ch&amp;#41;
          check-word &amp;#40;str &amp;#40;nth replaced-char check-idx&amp;#41; &amp;quot;&amp;#42;&amp;quot;&amp;#41; ;hack to fix edge case
          prefix &amp;#40;subs check-word 0 &amp;#40;.indexOf check-word &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41;&amp;#93;
      &amp;#40;trie/has-prefix? lexicon prefix&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This one is probably the hairiest function I have, and yet it's still quite understandable. In words, what it's doing is after you've already replaced the first &lt;code&gt;&amp;#42;&lt;/code&gt; with a new character, it figures out if the prefix (a substring from the beginning of the word up until the next &lt;code&gt;&amp;#42;&lt;/code&gt; character or the end of the word) is a prefix in the trie.&lt;/p&gt;&lt;p&gt;In code: first, you grab the index of the first word with a missing character (if such a word exists). Then, in the &lt;code&gt;let&lt;/code&gt; form, you bind &lt;code&gt;replaced-char&lt;/code&gt; to the vector where you've already inserted the char &lt;code&gt;ch&lt;/code&gt;. Now, you want to get the right prefix, which is all the characters from the beginning of the word up to the next &lt;code&gt;&amp;#42;&lt;/code&gt; or the end of the word. I solved this problem by just appending a &lt;code&gt;&amp;#42;&lt;/code&gt; to the end of the word, so the prefix substring is always correct. Finally, just check if the trie has that prefix. Voila.&lt;/p&gt;&lt;p&gt;4) &lt;code&gt;remove-char&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- remove-char &amp;#91;chars-remaining ch&amp;#93;
  &amp;quot;chars-remaining: a map from characters to frequencies
  ch: a character&amp;quot;
  &amp;#40;let &amp;#91;new-map &amp;#40;update-in chars-remaining &amp;#91;ch&amp;#93; dec&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;zero? &amp;#40;new-map ch&amp;#41;&amp;#41;
      &amp;#40;dissoc new-map ch&amp;#41;
      new-map&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This one just removes a character from the bag by decrementing the value of the character's key. It also cleans up the map by removing the key if a character's frequency is 0.&lt;/p&gt;&lt;p&gt;And that's it!&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Here are the results for a couple of inputs:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def words &amp;#91;&amp;quot;twi&amp;#42;t&amp;#42;&amp;#42;&amp;quot; &amp;quot;i&amp;#42;&amp;quot; &amp;quot;a&amp;#42;es&amp;#42;&amp;#42;e&amp;quot;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;twinter id amesite
twinter id awesome
twinter if amesite
twinter if awesome
twinter io amesite
twinter is amesite
twinter is awesome
twinter it awesome
twisted if amesite
twisted if awesome
twisted in amesite
twisted in awesome
twisted io amesite
twisted it awesome
twister id amesite
twister id awesome
twister if amesite
twister if awesome
twister in amesite
twister in awesome
twister io amesite
twister it awesome
twistle id amesite
twistle id awesome
twistle if amesite
twistle if awesome
twistle in amesite
twistle in awesome
twistle io amesite
twistle it awesome
twitten id awesome
twitten if awesome
twitten is awesome
twitter id awesome
twitter if awesome
twitter in awesome
twitter is awesome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check out the last entry of that one :). And another example?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def words &amp;#91;&amp;quot;twi&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;quot; &amp;quot;i&amp;#42;&amp;quot; &amp;quot;a&amp;#42;es&amp;#42;&amp;#42;e&amp;quot;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;twifold ie amesite
twifold in amesite
twifold is amesite
twigful id amesite
twigful id awesome
twigful ie amesite
twigful ie awesome
twigful in amesite
twigful in awesome
twigful io amesite
twigful is amesite
twigful is awesome
twigful it awesome
twiglet id awesome
twiglet if awesome
twiglet in awesome
twiglet is awesome
twindle if amesite
twindle if awesome
twindle io amesite
twindle is amesite
twindle is awesome
twindle it awesome
twingle id amesite
twingle id awesome
twingle if amesite
twingle if awesome
twingle io amesite
twingle is amesite
twingle is awesome
twingle it awesome
twinkle id amesite
twinkle id awesome
twinkle if amesite
twinkle if awesome
twinkle io amesite
twinkle is amesite
twinkle is awesome
twinkle it awesome
twinkly id amesite
twinkly id awesome
twinkly ie amesite
twinkly ie awesome
twinkly if amesite
twinkly if awesome
twinkly io amesite
twinkly is amesite
twinkly is awesome
twinkly it awesome
twinter id awesome
twinter if awesome
twinter is awesome
twiscar id amesite
twiscar id awesome
twiscar ie amesite
twiscar ie awesome
twiscar if amesite
twiscar if awesome
twiscar in amesite
twiscar in awesome
twiscar io amesite
twiscar it awesome
twisted if awesome
twisted in awesome
twister id awesome
twister if awesome
twister in awesome
twistle id awesome
twistle if awesome
twistle in awesome
twitchy id awesome
twitchy ie awesome
twitchy if awesome
twitchy in awesome
twitchy is awesome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeah, all those 2 letter thingies are in the Unix dictionary.&lt;/p&gt;&lt;p&gt;And note that &lt;code&gt;twitter&lt;/code&gt; doesn't appear in the second version because we can't repeat usage of &lt;code&gt;t&lt;/code&gt;'s.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Believe it or not, the final code you saw above is nearly what I wrote on the first pass with the  simpler data structure! I did very little debugging to get my &quot;first-draft&quot; code to  what you've just seen.&lt;/p&gt;&lt;p&gt;The reason is because the code &lt;strong&gt;just reads declaratively&lt;/strong&gt;. Really the only bug I encountered was not installing the &lt;code&gt;if-let&lt;/code&gt; forms, because I forgot that &lt;code&gt;find-word-with-missing&lt;/code&gt; could return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And, as a bonus optimization because I'm using Clojure, I memoized (aka cached) the results to the &lt;code&gt;find-word-with-missing&lt;/code&gt; function! What the &lt;code&gt;memoize&lt;/code&gt; builtin function does is  store a map of your function inputs and saves your function output, so if the function is computationally expensive or is repeatedly called with the same arguments, it can return the cached copy of the output! For obvious reasons, you can only &lt;code&gt;memoize&lt;/code&gt; functions without side effects.&lt;/p&gt;&lt;p&gt;Here's how that looks:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- find-word-with-missing-slow &amp;#91;words&amp;#93;
  &amp;quot;words: vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words
      &amp;#40;util/indices #&amp;#40;util/substring? % &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41; ;hard coding missing char...
      first&amp;#41;&amp;#41;

; check clojure docs for cache policies
&amp;#40;def find-word-with-missing 
  &amp;#40;memoize find-word-with-missing-slow&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Super nice. I wish I had this in all languages.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;You can find all the code for this on &lt;a href='https://github.com/jiangts/blog/tree/master/code/yang/'&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;coming&amp;#95;up&amp;#95;next&quot;&gt;&lt;/a&gt;Coming up next&lt;/h3&gt;&lt;p&gt;I've also been using the &lt;a href='https://github.com/Day8/re-frame'&gt;re-frame&lt;/a&gt; ClojureScript client-side library and I think it's a fantastic idea, so I should be writing a post about that in the near future!&lt;/p&gt;
</description>
<pubDate>
Thu, 06 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</link>
<title>
ClojureScript Node.js vim repl
</title>
<description>
&lt;p&gt;There are lots of great &quot;plug-and-play&quot; setups for ClojureScript in the browser, like Figwheel and Chestnut. However, getting a good REPL environment for ClojureScript targeting Node.js seemed quite under-documented. After consulting numerous resources (many of which, uh, how should I say, may or may not have been really outdated), here's how I did it:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get a starter ClojureScript Project&lt;pre&gt;&lt;code&gt;$ lein new mies replicious
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Follow basic directions in the README.md&lt;ul&gt;&lt;li&gt;in particular, run &lt;code&gt;lein npm install&lt;/code&gt;&lt;/li&gt;&lt;li&gt;also just a note: if you try to run &lt;code&gt;./scripts/repl&lt;/code&gt; as advertised in the      README it won't work! To fix it, you need to alter the      &lt;code&gt;./scripts/repl.clj&lt;/code&gt; file by changing the function call from `(repl/repl*      ...)&lt;code&gt; to &lt;/code&gt;(repl/repl ...)`.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Include Cemerick's &lt;a href='https://github.com/cemerick/piggieback'&gt;piggieback&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Add this snippet to your &lt;code&gt;project.clj&lt;/code&gt;&lt;pre&gt;&lt;code&gt;:profiles  {:dev  {:dependencies  &amp;#91;&amp;#91;com.cemerick/piggieback &amp;quot;0.2.1&amp;quot;&amp;#93;
                                     &amp;#91;org.clojure/tools.nrepl &amp;quot;0.2.10&amp;quot;&amp;#93;&amp;#93;
                     :repl-options  {:nrepl-middleware  &amp;#91;cemerick.piggieback/wrap-cljs-repl&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;In the repl, do the following:&lt;pre&gt;&lt;code&gt;$ lein repl
...
user=&amp;gt; &amp;#40;require '&amp;#91;cljs.repl.node :as node&amp;#93;&amp;#41;
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;In fireplace, run&lt;pre&gt;&lt;code&gt;:Piggieback &amp;#40;node/repl-env&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Try it out!&lt;ul&gt;&lt;li&gt;One last roadblock I encountered was the issue described      &lt;a href='https://github.com/tpope/vim-fireplace/issues/220'&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;I fixed it by simply updating to the latest version of fireplace :) (almost      too easy!).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;I think this is actually the first time I've successfully gotten fireplace to connect to a ClojureScript repl. I remember having some trouble connecting fireplace to the browser repls provided by figwheel/chestnut, so in those environments, I just live reload stuff and observe the output of the web console. Fast enough, but I think this will be even better :).&lt;/p&gt;
</description>
<pubDate>
Sat, 01 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</link>
<title>
Sophomore Fall
</title>
<description>
&lt;p&gt;It's time to choose classes at Stanford!&lt;/p&gt;&lt;p&gt;Unfortunately (fortunately?) there are too many cool CS classes to take at Stanford during the fall. Classes currently on my radar that are only offered fall quarter are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CS144 - Networking&lt;ul&gt;&lt;li&gt;in this class you basically learn how the internet works. It's inverted      classroom style, so you watch videos about theory at home and talk about      it in class. Having watched some videos out of curiosity, I can say that      they're really fascinating, and the professors do a great job detailing      the internet, one of the greatest engineering feats of modern technology.      The class is known to be one of the harder(est?) CS classes at Stanford      though, because you literally have to implement a lot of networking      protocols in C. I think the first assignment is writing a TCP server from      a provided bare-bones implementation of a UDP server. -- Really excited to      take this one!&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS251 - Bitcoin&lt;ul&gt;&lt;li&gt;This one is taught by Dan Boneh, (one of?) the world's greatest expert(s) on      computer security. I'm taking this one probably half because I want to      take a class with Dan and half because I think bitcoin is interesting      itself as a technology (and I want to know what the fuss is about, as I've      never actually looked into it).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS229 - Machine Learning&lt;ul&gt;&lt;li&gt;This was Andrew Ng's famous class, so I feel somewhat obligated as a      Stanford CS kid to take it.  It's actually known to not be the most      organized class (it had more students than CS106a last fall!) and I hear      some things are brushed over rather quickly, so it's imperative I put in      some extra time on learning the material if I actually want to know it.      But I still think it'll be super cool.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS221 - AI&lt;ul&gt;&lt;li&gt;A lot of older CS students told me to take this instead of 229, while others      told me it was a relatively easy class. In any case, I don't have space on      my schedule to take this class because it conflicts with 251, but I'll      definitely keep my ears perked to see what my friends have to say about      it. Who knows, I might even take a look at their problem sets or course      notes from time to time.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS131 - Computer Vision&lt;ul&gt;&lt;li&gt;This just sounds cool. Not many of my friends have talked about it, but I      think it would be super interesting. However, not tryna take 4 CS classes      this next quarter so it'll have to wait...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS145 - Databases&lt;ul&gt;&lt;li&gt;I already took a databases class in HS where we talked about 6 normal      forms in relational databases and went over basic queries. We also talked      about NoSQL databases like MongoDB, Riak, HBase, and Neo4J, of which I've      only used PostgreSQL and MongoDB semi-extensively. We also learned about      the CAP theorem and ACID compliance and the pros and cons of various      databases, but at the end of the day it wasn't so rigorous as it was only      a HS class. Hopefully this class will bring some rigor into what I learned      before and teach me new things when I take it next year.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'm also looking at taking Social Dance which is one of the most highly demanded classes at Stanford, (aka click enroll at exactly midnight!) and Math110 which is Number Theory. I figured I had to throw a math class in there to keep me thinking rigorously. Also I miss math, as I only took 1 math class last year :(.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;So those are my plans for now, and I'll append an update to this post when I actually finalize my schedule!&lt;/p&gt;
</description>
<pubDate>
Fri, 31 Jul 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</link>
<title>
New Blog
</title>
<description>
&lt;p&gt;After writing quite a few &quot;private blogs&quot; (translate: journal entries) over the years, I've decided to start a public blog on Github.&lt;/p&gt;&lt;p&gt;I'm using &lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt; (rather than Jekyll or Hugo or whatever million other options there are out there) because I fell in love with Clojure. The setup was simple. Just run&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new cryogen blog
$ cd blog
$ lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will get you a static site up and running.&lt;/p&gt;&lt;p&gt;Now, instead of following the advice on setting up a Github page on the cryogen docs, I did the following (which I found easier to maintain):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;initial commit&amp;quot; # ensure git knows about your subtree dir
$ git subtree push --prefix resources/public/blog origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also create a little shell script (found &lt;a href='https://gist.github.com/cobyism/4730490'&gt;here&lt;/a&gt;) to help you do the deploy to gh-pages process.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/bin/sh
if &amp;#91; -z &amp;quot;$1&amp;quot; &amp;#93;
then
  echo &amp;quot;Which folder do you want to deploy to GitHub Pages?&amp;quot;
  exit 1
fi
git subtree push --prefix $1 origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in the future you can just run the script and pass in the proper directory!&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;the&amp;#95;theme&quot;&gt;&lt;/a&gt;Customizing the theme&lt;/h3&gt;&lt;p&gt;I'm a huge fan of David Nolen's talks and his &lt;a href='http://swannodette.github.io'&gt;blog&lt;/a&gt;, and having found another Cryogen &lt;a href='http://blog.jethrokuan.com/'&gt;user&lt;/a&gt;  who was uh, heavily inspired by (stole?) his blog's style, I decided to give it a go as well. The theme looks super simple, which is fitting for any Clojurist :).&lt;/p&gt;&lt;p&gt;The main hurdle I came across was when dealing with Selmer for the first time. Essentially, the issue is that the &quot;tags&quot; button should only be  highlighted when the url is &quot;/blog/tags.html&quot;, and I didn't know how to get the current URL.&lt;/p&gt;&lt;p&gt;After fumbling around for a bit, (ok, like 40 minutes), I finally decided to &quot;be brave&quot; (translate: not be a noob) and  &lt;a href='https://github.com/cryogen-project/cryogen-core/blob/master/src/cryogen&amp;#95;core/compiler.clj'&gt;dig the source&lt;/a&gt; to find what  parameters where exactly being passed to the template. And there it was, &lt;code&gt;uri&lt;/code&gt; (doh!).&lt;/p&gt;&lt;p&gt;So it turns out things are pretty simple. God bless open source :).&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;complaints&amp;#95;about&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Complaints about Cryogen&lt;/h3&gt;&lt;p&gt;It appears that the markdown parser doesn't support the full markdown specification. For example, the horizontal lines had to be created with &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; rather than &lt;code&gt;---&lt;/code&gt;. Not a huge deal, but not so nice.&lt;/p&gt;&lt;p&gt;Also, creating a new theme was a bit weird as the structure doesn't follow the provided theme structures.  (to make a new theme I need to have a &lt;code&gt;dosynctemplates&lt;/code&gt; folder in addition to a &lt;code&gt;dosync&lt;/code&gt; folder?).&lt;/p&gt;&lt;p&gt;I'll try to submit some pull requests at some point if time permits...&lt;/p&gt;&lt;p&gt;But otherwise, a pleasant experience.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Depending on how life goes, hopefully we'll be seeing more posts on coding, math, life at Stanford etc. in the future!&lt;/p&gt;
</description>
<pubDate>
Thu, 30 Jul 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-29-docs.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-29-docs.html
</link>
<title>
Using Cryogen
</title>
<description>
&lt;p&gt;For additional documentation please see the &lt;a href='http://cryogenweb.org'&gt;cryogen site&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;blog posts and pages with Markdown (default) or AsciiDoc&lt;/li&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;table of contents generation&lt;/li&gt;&lt;li&gt;Default Twitter Bootstrap theme&lt;/li&gt;&lt;li&gt;plain HTML page templates&lt;/li&gt;&lt;li&gt;code syntax highlighting&lt;/li&gt;&lt;li&gt;Disqus support&lt;/li&gt;&lt;li&gt;GitHub Gist integration&lt;/li&gt;&lt;li&gt;sitemap&lt;/li&gt;&lt;li&gt;Sass/SCSS compilation&lt;/li&gt;&lt;li&gt;RSS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You will need &lt;a href='https://github.com/technomancy/leiningen'&gt;Leiningen&lt;/a&gt; 2.5.0 or above installed.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;a&amp;#95;new&amp;#95;site&quot;&gt;&lt;/a&gt;Creating a New Site&lt;/h3&gt;&lt;p&gt;A new site can be created using the Cryogen template as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;running&amp;#95;the&amp;#95;server&quot;&gt;&lt;/a&gt;Running the Server&lt;/h3&gt;&lt;p&gt;The web server can be started from the &lt;code&gt;my-blog&lt;/code&gt; directory using the &lt;code&gt;lein-ring&lt;/code&gt; plugin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server will watch for changes in the &lt;code&gt;resources/templates&lt;/code&gt; folder and recompile the content automatically.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;site&amp;#95;configuration&quot;&gt;&lt;/a&gt;Site Configuration&lt;/h3&gt;&lt;p&gt;The site configuration file is found at &lt;code&gt;templates/config.edn&lt;/code&gt;, this file looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:site-title       &amp;quot;My Awesome Blog&amp;quot;
 :author           &amp;quot;Bob Bobbert&amp;quot;
 :description      &amp;quot;This blog is awesome&amp;quot;
 :site-url         &amp;quot;http://blogawesome.com/&amp;quot;
 :post-root        &amp;quot;posts&amp;quot;
 :tag-root         &amp;quot;tags&amp;quot;
 :page-root        &amp;quot;pages&amp;quot;
 :blog-prefix      &amp;quot;/blog&amp;quot;
 :rss-name         &amp;quot;feed.xml&amp;quot;
 :rss-filters      &amp;#91;&amp;quot;cryogen&amp;quot;&amp;#93;
 :recent-posts     3
 :post-date-format &amp;quot;yyyy-MM-dd&amp;quot;
 :sass-src         nil
 :sass-dest        nil
 :resources        &amp;#91;&amp;quot;css&amp;quot; &amp;quot;js&amp;quot; &amp;quot;404.html&amp;quot;&amp;#93;
 :keep-files       &amp;#91;&amp;quot;.git&amp;quot;&amp;#93;
 :disqus?          false
 :disqus-shortname &amp;quot;&amp;quot;
 :ignored-files    &amp;#91;#&amp;quot;\.#.&amp;#42;&amp;quot; #&amp;quot;.&amp;#42;\.swp$&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;post-root&lt;/code&gt; - value prepended to all post uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;tag-root&lt;/code&gt; - value prepended to all tag uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;page-root&lt;/code&gt; - value prepended to all page uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;blog-prefix&lt;/code&gt; - prepended to all uri's (must start with slash), nil by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;rss-name&lt;/code&gt; - name of the rss file generated, nil defaults to &lt;code&gt;rss.xml&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;rss-filters&lt;/code&gt; - used to generate tag-based rss feeds for topic-specific rss aggregators. Tags listed here should match tags being used in your posts.&lt;/li&gt;&lt;li&gt;&lt;code&gt;recent-posts&lt;/code&gt; - number of recent posts to display in the sidebar&lt;/li&gt;&lt;li&gt;&lt;code&gt;post-date-format&lt;/code&gt; - date format for your .md or .asc files, yyyy-MM-dd by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;sass-src&lt;/code&gt; - directory containing sources of sass files to be  compiled - defaults to &quot;css&quot; - be sure to include this directory in  your &lt;code&gt;resources&lt;/code&gt; section&lt;/li&gt;&lt;li&gt;&lt;code&gt;sass-dest&lt;/code&gt; - directory where the compiled output CSS would be put    into. defaults to &quot;css&quot; - be sure to include this directory in    your &lt;code&gt;resources&lt;/code&gt; section&lt;/li&gt;&lt;li&gt;&lt;code&gt;resources&lt;/code&gt; - list of folders or files to be copied over from &lt;code&gt;templates&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;keep-files&lt;/code&gt; - list of folders or files that are not wiped in the &lt;code&gt;public&lt;/code&gt; directory. For example, this allows to keep a &lt;code&gt;.git&lt;/code&gt; directory there across recompiles of the site to versionize the generated files&lt;/li&gt;&lt;li&gt;&lt;code&gt;disqus?&lt;/code&gt; - set to true if you want disqus enabled on your site&lt;/li&gt;&lt;li&gt;&lt;code&gt;disqus-shortname&lt;/code&gt; - your disqus shortname&lt;/li&gt;&lt;li&gt;&lt;code&gt;ignored-files&lt;/code&gt; - list of regexps matching files the compiler should ignore&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;switching&amp;#95;between&amp;#95;markdown&amp;#95;and&amp;#95;asciidoc&quot;&gt;&lt;/a&gt;Switching between Markdown and AsciiDoc&lt;/h3&gt;&lt;p&gt;Cryogen comes with Markdown support as default. If you want to use AsciiDoc instead, open the &lt;code&gt;project.clj&lt;/code&gt; in your created blog (e.g. &lt;code&gt;my-blog&lt;/code&gt;), and change the line in &lt;code&gt;:dependencies&lt;/code&gt; that says &lt;code&gt;cryogen-markdown&lt;/code&gt; to &lt;code&gt;cryogen-asciidoc&lt;/code&gt;. Instead of looking for files ending in &lt;code&gt;.md&lt;/code&gt; in the &lt;code&gt;md&lt;/code&gt; directory, the compiler will now look for files ending in &lt;code&gt;.asc&lt;/code&gt; in the &lt;code&gt;asc&lt;/code&gt; directory.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;posts&quot;&gt;&lt;/a&gt;Creating Posts&lt;/h3&gt;&lt;p&gt;The posts are located in the &lt;code&gt;resources/templates/md/posts&lt;/code&gt; for Markdown files or &lt;code&gt;resources/templates/asc/posts&lt;/code&gt; for AsciiDoc files. Posts are written using Markdown or AsciiDoc and each post file should start with the date in the format of &lt;code&gt;yyyy-dd-MM&lt;/code&gt; or what is defined in the &lt;code&gt;:post-date-format&lt;/code&gt; key of &lt;code&gt;config.edn&lt;/code&gt;. The files have to have the extension &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.asc&lt;/code&gt; respectively. The compiler will link the posts in order for you using the dates. A valid post file written in Markdown might look as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;2014-19-12-post1.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The post content must start with a map containing the post metadata:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:title &amp;quot;First Post!&amp;quot;
 :layout :post
 :tags  &amp;#91;&amp;quot;tag1&amp;quot; &amp;quot;tag3&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The metadata contains the following keys:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:title&lt;/code&gt; - the title of the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:author&lt;/code&gt; - optional key to display the name of the author for the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:layout&lt;/code&gt; - the layout template to use for the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:tags&lt;/code&gt; - the tags associated with this post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:toc&lt;/code&gt; - boolean indicating whether table of contents should be generated, defaults to false&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The rest of the post should consist of valid Markdown content, eg:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;## Hello World

This is my first post!

check out this sweet code

    &amp;#40;defn foo &amp;#91;bar&amp;#93;
      &amp;#40;bar&amp;#41;&amp;#41;

Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Nunc sodales pharetra massa, eget fringilla ex ornare et.
Nunc mattis diam ac urna finibus sodales. Etiam sed ipsum
et purus commodo bibendum. Cras libero magna, fringilla
tristique quam sagittis, volutpat auctor mi. Aliquam luctus,
nulla et vestibulum finibus, nibh justo semper tortor, nec
vestibulum tortor est nec nisi.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you wish to enable comments on your posts, create a &lt;a href='https://disqus.com/'&gt;disqus&lt;/a&gt; account and &lt;a href='https://disqus.com/admin/create/'&gt;register&lt;/a&gt; your blog. &lt;code&gt;disqus?&lt;/code&gt; should be set to &lt;code&gt;true&lt;/code&gt; in the config and you must add your &lt;code&gt;disqus-shortname&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;pages&quot;&gt;&lt;/a&gt;Creating Pages&lt;/h3&gt;&lt;p&gt;Pages work similarly to posts, but aren't grouped by date. An example page might be an about page.&lt;/p&gt;&lt;p&gt;The pages contain the following metadata:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:title&lt;/code&gt; - the title of the page&lt;/li&gt;&lt;li&gt;&lt;code&gt;:layout&lt;/code&gt; - the layout template for the page&lt;/li&gt;&lt;li&gt;&lt;code&gt;:page-index&lt;/code&gt; - a number representing the order of the page in the navbar/sidebar&lt;/li&gt;&lt;li&gt;&lt;code&gt;:navbar?&lt;/code&gt; - determines whether the page should be shown in the navbar, &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;:toc&lt;/code&gt; - boolean indicating whether table of contents should be generated, defaults to false&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;layouts&quot;&gt;&lt;/a&gt;Customizing Layouts&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://github.com/yogthos/Selmer'&gt;Selmer&lt;/a&gt; templating engine for layouts. Please refer to its documentation to see the supported tags and filters for the layouts.&lt;/p&gt;&lt;p&gt;The layouts are contained in the &lt;code&gt;resources/templates/html/layouts&lt;/code&gt; folder of the project. By default, the &lt;code&gt;base.html&lt;/code&gt; layout is used to provide the general layout for the site. This is where you would add static resources such as CSS and Js assets as well as define headers and footers for your site.&lt;/p&gt;&lt;p&gt;Each page layout should have a name that matches the &lt;code&gt;:layout&lt;/code&gt; key in the page metadata and end with &lt;code&gt;.html&lt;/code&gt;. Page layouts extend the base layout and should only contain the content relaveant to the page inside the &lt;code&gt;content&lt;/code&gt; block. For example, the &lt;code&gt;tag&lt;/code&gt; layout is located in &lt;code&gt;tag.html&lt;/code&gt; and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;{% extends &amp;quot;templates/html/layouts/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;posts-by-tag&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Posts tagged {{name}}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {% for post in posts %}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{post.uri}}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;code&amp;#95;syntax&amp;#95;highlighting&quot;&gt;&lt;/a&gt;Code Syntax Highlighting&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt; for code syntax highlighting. You can add more languages by replacing &lt;code&gt;templates/js/highlight.pack.js&lt;/code&gt; with a customized package from &lt;a href='https://highlightjs.org/download/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt; initHighlightingOnLoad&lt;/code&gt; function is called in &lt;code&gt;templates/html/layouts/base.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;deploying&amp;#95;your&amp;#95;site&quot;&gt;&lt;/a&gt;Deploying Your Site&lt;/h2&gt;&lt;p&gt;The generated static content will be found under the &lt;code&gt;resources/public&lt;/code&gt; folder. Simply copy the content to a static folder for a server sugh as Nginx or Apache and your site is now ready for service.&lt;/p&gt;&lt;p&gt;A sample Nginx configuration that's placed in &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; can be seen below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;server{
  listen 80 default&amp;#95;server;
  listen &amp;#91;::&amp;#93;:80 default&amp;#95;server ipv6only=on;
  server&amp;#95;name localhost &amp;lt;yoursite.com&amp;gt; &amp;lt;www.yoursite.com&amp;gt;;

  access&amp;#95;log /var/log/blog&amp;#95;access.log;
  error&amp;#95;log /var/log/blog&amp;#95;error.log;

  location / {
    alias /var/blog/;
    error&amp;#95;page    404 = /404.html;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply set &lt;code&gt;yoursite.com&lt;/code&gt; to the domain of your site in the above configuration and ensure the static content is available at &lt;code&gt;/var/blog/&lt;/code&gt;. Finally, place your custom error page in the &lt;code&gt;/var/blog/404.html&lt;/code&gt; file.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;sites&amp;#95;made&amp;#95;with&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Some Sites Made With Cryogen&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://carmenla.me/blog/index.html'&gt;My personal blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cryogenweb.org'&gt;Cryogen Documentation Site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yogthos.net/'&gt;Yogthos blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.clojure.tn'&gt;Clojure :in Tunisia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://dl1ely.github.io'&gt;dl1ely.github.io&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jonase.github.io/nil-recur'&gt;nil/recur&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://tangrammer.github.io/'&gt;on the clojure move&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://blog.jethrokuan.com/'&gt;cognizance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Wed, 29 Jul 2015 00:00:00 -0700
</pubDate>
</item>
</channel>
</rss>
