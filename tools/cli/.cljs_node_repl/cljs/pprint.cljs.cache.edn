;; Analyzed by ClojureScript 0.0-3308
{:name cljs.pprint, :doc "A Pretty Printer for ClojureScript\n\ncljs.pprint implements a flexible system for printing structured data\nin a pleasing, easy-to-understand format. Basic use of the pretty printer is \nsimple, just call pprint instead of println. More advanced users can use \nthe building blocks provided to create custom output formats. \n\nOut of the box, pprint supports a simple structured format for basic data \nand a specialized format for Clojure source code. More advanced formats,\nincluding formats that don't look like Clojure data at all like XML and \nJSON, can be rendered by creating custom dispatch functions. \n\nIn addition to the pprint function, this module contains cl-format, a text \nformatting function which is fully compatible with the format function in \nCommon Lisp. Because pretty printing directives are directly integrated with\ncl-format, it supports very concise custom dispatch. It also provides\na more powerful alternative to Clojure's standard format function.\n\nSee documentation for pprint and cl-format for more information or \ncomplete documentation on the the clojure web site on github.", :excludes #{}, :use-macros nil, :require-macros nil, :uses {walk clojure.walk}, :requires {clojure.walk clojure.walk}, :imports nil, :defs {prerr {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 114, :column 8, :end-line 114, :end-column 13, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/prerr, :variadic true, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, rtrim {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 83, :column 8, :end-line 83, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/rtrim, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, ltrim {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 94, :column 8, :end-line 94, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/ltrim, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, unzip-map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 72, :column 8, :end-line 72, :end-column 17, :private true, :arglists (quote ([m]))}, :private true, :name cljs.pprint/unzip-map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, map-passing-context {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 45, :column 8, :end-line 45, :end-column 27, :private true, :arglists (quote ([func initial-context lis]))}, :private true, :name cljs.pprint/map-passing-context, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 27, :method-params ([func initial-context lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func initial-context lis]))}, prefix-count {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 104, :column 8, :end-line 104, :end-column 20, :private true, :arglists (quote ([aseq val]))}, :private true, :name cljs.pprint/prefix-count, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 20, :method-params ([aseq val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([aseq val]))}, consume {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 56, :column 8, :end-line 56, :end-column 15, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 15, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, PrettyFlush {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 120, :column 14, :end-line 120, :end-column 25, :doc nil, :protocol-symbol true, :protocol-info {:methods {ppflush [[this]]}}}, :protocol-symbol true, :name cljs.pprint/PrettyFlush, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 25, :column 1, :line 120, :protocol-info {:methods {ppflush [[this]]}}, :info nil, :end-line 120, :impls #{}, :doc nil}, ppflush {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 120, :column 27, :end-line 120, :end-column 34, :protocol cljs.pprint/PrettyFlush, :doc nil, :arglists (quote ([this]))}, :protocol cljs.pprint/PrettyFlush, :name cljs.pprint/ppflush, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 34, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, consume-while {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 64, :column 8, :end-line 64, :end-column 21, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume-while, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 21, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, tuple-map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :line 79, :column 8, :end-line 79, :end-column 17, :private true, :arglists (quote ([m v1]))}, :private true, :name cljs.pprint/tuple-map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/0.0-3165/clojurescript-0.0-3165.jar!/cljs/pprint.cljs", :end-column 17, :method-params ([m v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v1]))}}}