<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://jiangts.github.io/blog' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
jiangts
</title>
<link>
http://jiangts.github.io/blog
</link>
<description>

</description>
<lastBuildDate>
Sat, 01 Aug 2015 13:02:03 -0700
</lastBuildDate>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</link>
<title>
ClojureScript Node.js vim repl
</title>
<description>
&lt;p&gt;There are lots of great &quot;plug-and-play&quot; setups for ClojureScript in the browser, like Figwheel and Chestnut. However, getting a good REPL environment for ClojureScript targeting Node.js seemed quite under-documented. After consulting numerous resources (many of which, uh, how should I say, may or may not have been really outdated), here's how I did it:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get a starter ClojureScript Project&lt;pre&gt;&lt;code&gt;$ lein new mies replicious
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Follow basic directions in the README.md&lt;ul&gt;&lt;li&gt;in particular, run &lt;code&gt;lein npm install&lt;/code&gt;&lt;/li&gt;&lt;li&gt;also just a note: if you try to run &lt;code&gt;./scripts/repl&lt;/code&gt; as advertised in the      README it won't work! To fix it, you need to alter the      &lt;code&gt;./scripts/repl.clj&lt;/code&gt; file by changing the function call from `(repl/repl*      ...)&lt;code&gt; to &lt;/code&gt;(repl/repl ...)`.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Include Cemerick's &lt;a href='https://github.com/cemerick/piggieback'&gt;piggieback&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Add this snippet to your &lt;code&gt;project.clj&lt;/code&gt;&lt;pre&gt;&lt;code&gt;:profiles  {:dev  {:dependencies  &amp;#91;&amp;#91;com.cemerick/piggieback &amp;quot;0.2.1&amp;quot;&amp;#93;
                                     &amp;#91;org.clojure/tools.nrepl &amp;quot;0.2.10&amp;quot;&amp;#93;&amp;#93;
                     :repl-options  {:nrepl-middleware  &amp;#91;cemerick.piggieback/wrap-cljs-repl&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;In the repl, do the following:&lt;pre&gt;&lt;code&gt;$ lein repl
...
user=&amp;gt; &amp;#40;require '&amp;#91;cljs.repl.node :as node&amp;#93;&amp;#41;
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;In fireplace, run&lt;pre&gt;&lt;code&gt;:Piggieback &amp;#40;node/repl-env&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Try it out!&lt;ul&gt;&lt;li&gt;One last roadblock I encountered was the issue described      &lt;a href='https://github.com/tpope/vim-fireplace/issues/220'&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;I fixed it by simply updating to the latest version of fireplace :) (almost      too easy!).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;I think this is actually the first time I've successfully gotten fireplace to connect to a ClojureScript repl. I remember having some trouble connecting fireplace to the browser repls provided by figwheel/chestnut, so in those environments, I just live reload stuff and observe the output of the web console. Fast enough, but I think this will be even better :).&lt;/p&gt;
</description>
<pubDate>
Sat, 01 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</link>
<title>
Sophomore Fall
</title>
<description>
&lt;p&gt;It's time to choose classes at Stanford!&lt;/p&gt;&lt;p&gt;Unfortunately (fortunately?) there are too many cool CS classes to take at Stanford during the fall. Classes currently on my radar that are only offered fall quarter are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CS144 - Networking&lt;ul&gt;&lt;li&gt;in this class you basically learn how the internet works. It's inverted      classroom style, so you watch videos about theory at home and talk about      it in class. Having watched some videos out of curiosity, I can say that      they're really fascinating, and the professors do a great job detailing      the internet, one of the greatest engineering feats of modern technology.      The class is known to be one of the harder(est?) CS classes at Stanford      though, because you literally have to implement a lot of networking      protocols in C. I think the first assignment is writing a TCP server from      a provided bare-bones implementation of a UDP server. -- Really excited to      take this one!&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS251 - Bitcoin&lt;ul&gt;&lt;li&gt;This one is taught by Dan Boneh, (one of?) the world's greatest expert(s) on      computer security. I'm taking this one probably half because I want to      take a class with Dan and half because I think bitcoin is interesting      itself as a technology (and I want to know what the fuss is about, as I've      never actually looked into it).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS229 - Machine Learning&lt;ul&gt;&lt;li&gt;This was Andrew Ng's famous class, so I feel somewhat obligated as a      Stanford CS kid to take it.  It's actually known to not be the most      organized class (it had more students than CS106a last fall!) and I hear      some things are brushed over rather quickly, so it's imperative I put in      some extra time on learning the material if I actually want to know it.      But I still think it'll be super cool.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS221 - AI&lt;ul&gt;&lt;li&gt;A lot of older CS students told me to take this instead of 229, while others      told me it was a relatively easy class. In any case, I don't have space on      my schedule to take this class because it conflicts with 251, but I'll      definitely keep my ears perked to see what my friends have to say about      it. Who knows, I might even take a look at their problem sets or course      notes from time to time.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS131 - Computer Vision&lt;ul&gt;&lt;li&gt;This just sounds cool. Not many of my friends have talked about it, but I      think it would be super interesting. However, not tryna take 4 CS classes      this next quarter so it'll have to wait...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS145 - Databases&lt;ul&gt;&lt;li&gt;I already took a databases class in HS where we talked about 6 normal      forms in relational databases and went over basic queries. We also talked      about NoSQL databases like MongoDB, Riak, HBase, and Neo4J, of which I've      only used PostgreSQL and MongoDB semi-extensively. We also learned about      the CAP theorem and ACID compliance and the pros and cons of various      databases, but at the end of the day it wasn't so rigorous as it was only      a HS class. Hopefully this class will bring some rigor into what I learned      before and teach me new things when I take it next year.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'm also looking at taking Social Dance which is one of the most highly demanded classes at Stanford, (aka click enroll at exactly midnight!) and Math110 which is Number Theory. I figured I had to throw a math class in there to keep me thinking rigorously. Also I miss math, as I only took 1 math class last year :(.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;So those are my plans for now, and I'll append an update to this post when I actually finalize my schedule!&lt;/p&gt;
</description>
<pubDate>
Fri, 31 Jul 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</link>
<title>
New Blog
</title>
<description>
&lt;p&gt;After writing quite a few &quot;private blogs&quot; (translate: journal entries) over the years, I've decided to start a public blog on Github.&lt;/p&gt;&lt;p&gt;I'm using &lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt; (rather than Jekyll or Hugo or whatever million other options there are out there) because I fell in love with Clojure. The setup was simple. Just run&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new cryogen blog
$ cd blog
$ lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will get you a static site up and running.&lt;/p&gt;&lt;p&gt;Now, instead of following the advice on setting up a Github page on the cryogen docs, I did the following (which I found easier to maintain):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;initial commit&amp;quot; # ensure git knows about your subtree dir
$ git subtree push --prefix resources/public/blog origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also create a little shell script (found &lt;a href='https://gist.github.com/cobyism/4730490'&gt;here&lt;/a&gt;) to help you do the deploy to gh-pages process.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/bin/sh
if &amp;#91; -z &amp;quot;$1&amp;quot; &amp;#93;
then
  echo &amp;quot;Which folder do you want to deploy to GitHub Pages?&amp;quot;
  exit 1
fi
git subtree push --prefix $1 origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in the future you can just run the script and pass in the proper directory!&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;the&amp;#95;theme&quot;&gt;&lt;/a&gt;Customizing the theme&lt;/h3&gt;&lt;p&gt;I'm a huge fan of David Nolen's talks and his &lt;a href='http://swannodette.github.io'&gt;blog&lt;/a&gt;, and having found another Cryogen &lt;a href='http://blog.jethrokuan.com/'&gt;user&lt;/a&gt;  who was uh, heavily inspired by (stole?) his blog's style, I decided to give it a go as well. The theme looks super simple, which is fitting for any Clojurist :).&lt;/p&gt;&lt;p&gt;The main hurdle I came across was when dealing with Selmer for the first time. Essentially, the issue is that the &quot;tags&quot; button should only be  highlighted when the url is &quot;/blog/tags.html&quot;, and I didn't know how to get the current URL.&lt;/p&gt;&lt;p&gt;After fumbling around for a bit, (ok, like 40 minutes), I finally decided to &quot;be brave&quot; (translate: not be a noob) and  &lt;a href='https://github.com/cryogen-project/cryogen-core/blob/master/src/cryogen&amp;#95;core/compiler.clj'&gt;dig the source&lt;/a&gt; to find what  parameters where exactly being passed to the template. And there it was, &lt;code&gt;uri&lt;/code&gt; (doh!).&lt;/p&gt;&lt;p&gt;So it turns out things are pretty simple. God bless open source :).&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;complaints&amp;#95;about&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Complaints about Cryogen&lt;/h3&gt;&lt;p&gt;It appears that the markdown parser doesn't support the full markdown specification. For example, the horizontal lines had to be created with &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; rather than &lt;code&gt;---&lt;/code&gt;. Not a huge deal, but not so nice.&lt;/p&gt;&lt;p&gt;Also, creating a new theme was a bit weird as the structure doesn't follow the provided theme structures.  (to make a new theme I need to have a &lt;code&gt;dosynctemplates&lt;/code&gt; folder in addition to a &lt;code&gt;dosync&lt;/code&gt; folder?).&lt;/p&gt;&lt;p&gt;I'll try to submit some pull requests at some point if time permits...&lt;/p&gt;&lt;p&gt;But otherwise, a pleasant experience.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Depending on how life goes, hopefully we'll be seeing more posts on coding, math, life at Stanford etc. in the future!&lt;/p&gt;
</description>
<pubDate>
Thu, 30 Jul 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-29-docs.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-29-docs.html
</link>
<title>
Using Cryogen
</title>
<description>
&lt;p&gt;For additional documentation please see the &lt;a href='http://cryogenweb.org'&gt;cryogen site&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;blog posts and pages with Markdown (default) or AsciiDoc&lt;/li&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;table of contents generation&lt;/li&gt;&lt;li&gt;Default Twitter Bootstrap theme&lt;/li&gt;&lt;li&gt;plain HTML page templates&lt;/li&gt;&lt;li&gt;code syntax highlighting&lt;/li&gt;&lt;li&gt;Disqus support&lt;/li&gt;&lt;li&gt;GitHub Gist integration&lt;/li&gt;&lt;li&gt;sitemap&lt;/li&gt;&lt;li&gt;Sass/SCSS compilation&lt;/li&gt;&lt;li&gt;RSS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You will need &lt;a href='https://github.com/technomancy/leiningen'&gt;Leiningen&lt;/a&gt; 2.5.0 or above installed.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;a&amp;#95;new&amp;#95;site&quot;&gt;&lt;/a&gt;Creating a New Site&lt;/h3&gt;&lt;p&gt;A new site can be created using the Cryogen template as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;running&amp;#95;the&amp;#95;server&quot;&gt;&lt;/a&gt;Running the Server&lt;/h3&gt;&lt;p&gt;The web server can be started from the &lt;code&gt;my-blog&lt;/code&gt; directory using the &lt;code&gt;lein-ring&lt;/code&gt; plugin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server will watch for changes in the &lt;code&gt;resources/templates&lt;/code&gt; folder and recompile the content automatically.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;site&amp;#95;configuration&quot;&gt;&lt;/a&gt;Site Configuration&lt;/h3&gt;&lt;p&gt;The site configuration file is found at &lt;code&gt;templates/config.edn&lt;/code&gt;, this file looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:site-title       &amp;quot;My Awesome Blog&amp;quot;
 :author           &amp;quot;Bob Bobbert&amp;quot;
 :description      &amp;quot;This blog is awesome&amp;quot;
 :site-url         &amp;quot;http://blogawesome.com/&amp;quot;
 :post-root        &amp;quot;posts&amp;quot;
 :tag-root         &amp;quot;tags&amp;quot;
 :page-root        &amp;quot;pages&amp;quot;
 :blog-prefix      &amp;quot;/blog&amp;quot;
 :rss-name         &amp;quot;feed.xml&amp;quot;
 :rss-filters      &amp;#91;&amp;quot;cryogen&amp;quot;&amp;#93;
 :recent-posts     3
 :post-date-format &amp;quot;yyyy-MM-dd&amp;quot;
 :sass-src         nil
 :sass-dest        nil
 :resources        &amp;#91;&amp;quot;css&amp;quot; &amp;quot;js&amp;quot; &amp;quot;404.html&amp;quot;&amp;#93;
 :keep-files       &amp;#91;&amp;quot;.git&amp;quot;&amp;#93;
 :disqus?          false
 :disqus-shortname &amp;quot;&amp;quot;
 :ignored-files    &amp;#91;#&amp;quot;\.#.&amp;#42;&amp;quot; #&amp;quot;.&amp;#42;\.swp$&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;post-root&lt;/code&gt; - value prepended to all post uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;tag-root&lt;/code&gt; - value prepended to all tag uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;page-root&lt;/code&gt; - value prepended to all page uri's&lt;/li&gt;&lt;li&gt;&lt;code&gt;blog-prefix&lt;/code&gt; - prepended to all uri's (must start with slash), nil by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;rss-name&lt;/code&gt; - name of the rss file generated, nil defaults to &lt;code&gt;rss.xml&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;rss-filters&lt;/code&gt; - used to generate tag-based rss feeds for topic-specific rss aggregators. Tags listed here should match tags being used in your posts.&lt;/li&gt;&lt;li&gt;&lt;code&gt;recent-posts&lt;/code&gt; - number of recent posts to display in the sidebar&lt;/li&gt;&lt;li&gt;&lt;code&gt;post-date-format&lt;/code&gt; - date format for your .md or .asc files, yyyy-MM-dd by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;sass-src&lt;/code&gt; - directory containing sources of sass files to be  compiled - defaults to &quot;css&quot; - be sure to include this directory in  your &lt;code&gt;resources&lt;/code&gt; section&lt;/li&gt;&lt;li&gt;&lt;code&gt;sass-dest&lt;/code&gt; - directory where the compiled output CSS would be put    into. defaults to &quot;css&quot; - be sure to include this directory in    your &lt;code&gt;resources&lt;/code&gt; section&lt;/li&gt;&lt;li&gt;&lt;code&gt;resources&lt;/code&gt; - list of folders or files to be copied over from &lt;code&gt;templates&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;keep-files&lt;/code&gt; - list of folders or files that are not wiped in the &lt;code&gt;public&lt;/code&gt; directory. For example, this allows to keep a &lt;code&gt;.git&lt;/code&gt; directory there across recompiles of the site to versionize the generated files&lt;/li&gt;&lt;li&gt;&lt;code&gt;disqus?&lt;/code&gt; - set to true if you want disqus enabled on your site&lt;/li&gt;&lt;li&gt;&lt;code&gt;disqus-shortname&lt;/code&gt; - your disqus shortname&lt;/li&gt;&lt;li&gt;&lt;code&gt;ignored-files&lt;/code&gt; - list of regexps matching files the compiler should ignore&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;switching&amp;#95;between&amp;#95;markdown&amp;#95;and&amp;#95;asciidoc&quot;&gt;&lt;/a&gt;Switching between Markdown and AsciiDoc&lt;/h3&gt;&lt;p&gt;Cryogen comes with Markdown support as default. If you want to use AsciiDoc instead, open the &lt;code&gt;project.clj&lt;/code&gt; in your created blog (e.g. &lt;code&gt;my-blog&lt;/code&gt;), and change the line in &lt;code&gt;:dependencies&lt;/code&gt; that says &lt;code&gt;cryogen-markdown&lt;/code&gt; to &lt;code&gt;cryogen-asciidoc&lt;/code&gt;. Instead of looking for files ending in &lt;code&gt;.md&lt;/code&gt; in the &lt;code&gt;md&lt;/code&gt; directory, the compiler will now look for files ending in &lt;code&gt;.asc&lt;/code&gt; in the &lt;code&gt;asc&lt;/code&gt; directory.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;posts&quot;&gt;&lt;/a&gt;Creating Posts&lt;/h3&gt;&lt;p&gt;The posts are located in the &lt;code&gt;resources/templates/md/posts&lt;/code&gt; for Markdown files or &lt;code&gt;resources/templates/asc/posts&lt;/code&gt; for AsciiDoc files. Posts are written using Markdown or AsciiDoc and each post file should start with the date in the format of &lt;code&gt;yyyy-dd-MM&lt;/code&gt; or what is defined in the &lt;code&gt;:post-date-format&lt;/code&gt; key of &lt;code&gt;config.edn&lt;/code&gt;. The files have to have the extension &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.asc&lt;/code&gt; respectively. The compiler will link the posts in order for you using the dates. A valid post file written in Markdown might look as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;2014-19-12-post1.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The post content must start with a map containing the post metadata:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:title &amp;quot;First Post!&amp;quot;
 :layout :post
 :tags  &amp;#91;&amp;quot;tag1&amp;quot; &amp;quot;tag3&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The metadata contains the following keys:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:title&lt;/code&gt; - the title of the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:author&lt;/code&gt; - optional key to display the name of the author for the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:layout&lt;/code&gt; - the layout template to use for the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:tags&lt;/code&gt; - the tags associated with this post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:toc&lt;/code&gt; - boolean indicating whether table of contents should be generated, defaults to false&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The rest of the post should consist of valid Markdown content, eg:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;## Hello World

This is my first post!

check out this sweet code

    &amp;#40;defn foo &amp;#91;bar&amp;#93;
      &amp;#40;bar&amp;#41;&amp;#41;

Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Nunc sodales pharetra massa, eget fringilla ex ornare et.
Nunc mattis diam ac urna finibus sodales. Etiam sed ipsum
et purus commodo bibendum. Cras libero magna, fringilla
tristique quam sagittis, volutpat auctor mi. Aliquam luctus,
nulla et vestibulum finibus, nibh justo semper tortor, nec
vestibulum tortor est nec nisi.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you wish to enable comments on your posts, create a &lt;a href='https://disqus.com/'&gt;disqus&lt;/a&gt; account and &lt;a href='https://disqus.com/admin/create/'&gt;register&lt;/a&gt; your blog. &lt;code&gt;disqus?&lt;/code&gt; should be set to &lt;code&gt;true&lt;/code&gt; in the config and you must add your &lt;code&gt;disqus-shortname&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;creating&amp;#95;pages&quot;&gt;&lt;/a&gt;Creating Pages&lt;/h3&gt;&lt;p&gt;Pages work similarly to posts, but aren't grouped by date. An example page might be an about page.&lt;/p&gt;&lt;p&gt;The pages contain the following metadata:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:title&lt;/code&gt; - the title of the page&lt;/li&gt;&lt;li&gt;&lt;code&gt;:layout&lt;/code&gt; - the layout template for the page&lt;/li&gt;&lt;li&gt;&lt;code&gt;:page-index&lt;/code&gt; - a number representing the order of the page in the navbar/sidebar&lt;/li&gt;&lt;li&gt;&lt;code&gt;:navbar?&lt;/code&gt; - determines whether the page should be shown in the navbar, &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt;&lt;li&gt;&lt;code&gt;:toc&lt;/code&gt; - boolean indicating whether table of contents should be generated, defaults to false&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;layouts&quot;&gt;&lt;/a&gt;Customizing Layouts&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://github.com/yogthos/Selmer'&gt;Selmer&lt;/a&gt; templating engine for layouts. Please refer to its documentation to see the supported tags and filters for the layouts.&lt;/p&gt;&lt;p&gt;The layouts are contained in the &lt;code&gt;resources/templates/html/layouts&lt;/code&gt; folder of the project. By default, the &lt;code&gt;base.html&lt;/code&gt; layout is used to provide the general layout for the site. This is where you would add static resources such as CSS and Js assets as well as define headers and footers for your site.&lt;/p&gt;&lt;p&gt;Each page layout should have a name that matches the &lt;code&gt;:layout&lt;/code&gt; key in the page metadata and end with &lt;code&gt;.html&lt;/code&gt;. Page layouts extend the base layout and should only contain the content relaveant to the page inside the &lt;code&gt;content&lt;/code&gt; block. For example, the &lt;code&gt;tag&lt;/code&gt; layout is located in &lt;code&gt;tag.html&lt;/code&gt; and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;{% extends &amp;quot;templates/html/layouts/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;posts-by-tag&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Posts tagged {{name}}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {% for post in posts %}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{post.uri}}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;code&amp;#95;syntax&amp;#95;highlighting&quot;&gt;&lt;/a&gt;Code Syntax Highlighting&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt; for code syntax highlighting. You can add more languages by replacing &lt;code&gt;templates/js/highlight.pack.js&lt;/code&gt; with a customized package from &lt;a href='https://highlightjs.org/download/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt; initHighlightingOnLoad&lt;/code&gt; function is called in &lt;code&gt;templates/html/layouts/base.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;deploying&amp;#95;your&amp;#95;site&quot;&gt;&lt;/a&gt;Deploying Your Site&lt;/h2&gt;&lt;p&gt;The generated static content will be found under the &lt;code&gt;resources/public&lt;/code&gt; folder. Simply copy the content to a static folder for a server sugh as Nginx or Apache and your site is now ready for service.&lt;/p&gt;&lt;p&gt;A sample Nginx configuration that's placed in &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; can be seen below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;server{
  listen 80 default&amp;#95;server;
  listen &amp;#91;::&amp;#93;:80 default&amp;#95;server ipv6only=on;
  server&amp;#95;name localhost &amp;lt;yoursite.com&amp;gt; &amp;lt;www.yoursite.com&amp;gt;;

  access&amp;#95;log /var/log/blog&amp;#95;access.log;
  error&amp;#95;log /var/log/blog&amp;#95;error.log;

  location / {
    alias /var/blog/;
    error&amp;#95;page    404 = /404.html;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply set &lt;code&gt;yoursite.com&lt;/code&gt; to the domain of your site in the above configuration and ensure the static content is available at &lt;code&gt;/var/blog/&lt;/code&gt;. Finally, place your custom error page in the &lt;code&gt;/var/blog/404.html&lt;/code&gt; file.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;sites&amp;#95;made&amp;#95;with&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Some Sites Made With Cryogen&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://carmenla.me/blog/index.html'&gt;My personal blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cryogenweb.org'&gt;Cryogen Documentation Site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yogthos.net/'&gt;Yogthos blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.clojure.tn'&gt;Clojure :in Tunisia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://dl1ely.github.io'&gt;dl1ely.github.io&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jonase.github.io/nil-recur'&gt;nil/recur&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://tangrammer.github.io/'&gt;on the clojure move&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://blog.jethrokuan.com/'&gt;cognizance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Wed, 29 Jul 2015 00:00:00 -0700
</pubDate>
</item>
</channel>
</rss>
