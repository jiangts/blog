<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://jiangts.github.io/blog' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
jiangts
</title>
<link>
http://jiangts.github.io/blog
</link>
<description>

</description>
<lastBuildDate>
Thu, 08 Oct 2015 12:05:07 -0700
</lastBuildDate>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-10-8-append-only-ledger.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-10-8-append-only-ledger.html
</link>
<title>
AppendOnlyLedger
</title>
<description>
&lt;p&gt;Recently, I've had a couple of friends at Stanford experience major burnout from the difficulty of their classes. It's also made me consider the workload that I have this quarter, which most friends say is pretty insane.&lt;/p&gt;&lt;p&gt;While it is a ton of work, I don't want to drop any of my classes because I simply love them all (so far, at least!). I actually see every class (barring Math110) as a possibility opener for me. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;CS144: Networks&lt;ul&gt;&lt;li&gt;Gain fundamental understanding of networking protocols/the internet - invaluable&lt;ul&gt;&lt;li&gt;Opens possibilities to write my own peer to peer networking applications,        better understand the internals of protocols such as WebRTC, understand        NAT traversal protocols, UPnP, etc.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The same networking principles and protocols will be with us for a long, long time.&lt;/li&gt;&lt;li&gt;It's good to know about how networks operate for p2p, bitcoin, and security-related projects.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS251: Bitcoin&lt;ul&gt;&lt;li&gt;This is a huge possibility opener.&lt;ul&gt;&lt;li&gt;introduction to some novel applications of crypto&lt;/li&gt;&lt;li&gt;understanding of the Bitcoin protocol (new technology!) and related        protocols like Ethereum and Stellar&lt;/li&gt;&lt;li&gt;this stuff might take off. This stuff includes related cryptocurrencies        such as Ethereum/Stellar. Again, bitcoin protocol is a technology.        Bitcoin itself doesn't have to be the one that takes off for me to have        gained something really really valuable and timely from this class.&lt;/li&gt;&lt;li&gt;I'd like to think that this is the &quot;learning about the future&quot; that Paul Graham talks about.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS229: Machine Learning&lt;ul&gt;&lt;li&gt;This has gotten so much attention recently that it's obvious that it's a possibility opener.&lt;/li&gt;&lt;li&gt;It's interesting, it has impact, it gets you jobs, and it might even get you startup ideas.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Social Dance&lt;ul&gt;&lt;li&gt;This is a possibility opener. I wouldn't have learned any of this otherwise.      'nuff said.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Math110: Applied Number Theory and Field Theory (crypto)&lt;ul&gt;&lt;li&gt;This is the only class that isn't really a &quot;possibility opener&quot; for me.&lt;/li&gt;&lt;li&gt;I do, however, learn the math behind some of the most fundamental crypto      protocols. It's inherently interesting, it's fun, I'm happy.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As I invest my time into these classes, I want to remember why I am excited about the classes and what I've learned.&lt;/p&gt;&lt;p&gt;This list will serve as an append only ledger of all the things I've learned in my classes that are super exciting to me. I'll update it from time to time, when  I get really excited about something I'm learning. A little more infrequently, I might write a post about a specific topic. It'll take more time, but it might help me learn things better.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;cs144:&quot;&gt;&lt;/a&gt;CS144:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;A ton of &quot;aha&quot; moments. So THAT'S how it works!&lt;/li&gt;&lt;li&gt;Learn about the pretty dang well designed engineering that is the internet&lt;/li&gt;&lt;li&gt;Layering, encapsulation, and end-to-end principles&lt;/li&gt;&lt;li&gt;Learned how packet forwarding is done within routers&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;cs251:&quot;&gt;&lt;/a&gt;CS251:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Everything. Learned about binding commitments, Merkle trees, proof of work, etc.&lt;/li&gt;&lt;li&gt;Multisig transactions and some cool applications&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;cs229:&quot;&gt;&lt;/a&gt;CS229:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Generalized Linear Models&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;math110:&quot;&gt;&lt;/a&gt;Math110:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Learned the inner workings of RSA! Including how large primes are found in keygen!&lt;/li&gt;&lt;li&gt;Some factoring methods: Pollard's Rho and Quadratic Sieve&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;social&amp;#95;dance&quot;&gt;&lt;/a&gt;Social Dance&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;4 count, 6 count, triple step swing. Fun fun fun!&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Thu, 08 Oct 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-21-getting-octave.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-21-getting-octave.html
</link>
<title>
Setting up Octave on Mac OSX
</title>
<description>
&lt;p&gt;Wanted to get Octave on my Macintosh because I want to work on CS229 assignments locally (Stanford doesn't give us a license for Matlab, we can only use it on school computers/via ssh on our clusters).&lt;/p&gt;&lt;p&gt;Turns out Octave installation isn't the easiest thing in the world because it took more than hitting the first couple of links on Google, so here's a record of how I did it on Mac OS X Yosemite.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ brew install octave --build-from-source --without-java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You need to specify without java flag because (on Yosemite at least) the homebrew Octave build seems to depend on Java 6 or some weirdness that the Octave homebrew Github issues page people still haven't figured out. https://github.com/Homebrew/homebrew-science/issues/1899&lt;/p&gt;&lt;p&gt;I won't be needing Java support from Matlab in this class so it's ok. (shrug)&lt;/p&gt;&lt;p&gt;To get visualization working, follow this blog: http://adampash.com/how-to-install-octave/&lt;/p&gt;&lt;p&gt;Essentially,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# install octave
brew install octave --with-x11

# install fltk for gnuplot
brew install fltk

# install gnuplot &amp;#40;this may be installed as part of octave now&amp;#41;
brew install gnuplot --with-x11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Evidently, the dude in the blog post suggests getting mactex, but TeX is usually pretty huge so I said &quot;thanks but no thanks&quot;.&lt;/p&gt;&lt;p&gt;Next, make an &lt;code&gt;.octaverc&lt;/code&gt; file with&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# &amp;#126;/.octaverc
setenv &amp;#40;&amp;quot;GNUTERM&amp;quot;, &amp;quot;X11&amp;quot;&amp;#41;

# below is optional; changes the prompt to two chevron
# and gets rid of the long Octave x.x.x &amp;gt;&amp;gt; prompt
PS1&amp;#40;'&amp;gt;&amp;gt; '&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now be gucci. If you aren't, let me know on &lt;a href='https://twitter.com/jiangts'&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Mon, 21 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-21-first-day-sophomore.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-21-first-day-sophomore.html
</link>
<title>
Sophomore Classes
</title>
<description>
&lt;p&gt;First day of classes all fantastic.&lt;/p&gt;&lt;p&gt;ML class about building blocks of ML (e.g. the various techniques from linear regression to SVMs to Neural Networks to K-means clustering)  but more excitingly, diagnosing where to go next.&lt;/p&gt;&lt;p&gt;Argument is that in any ML problem there can be as many as 10-15 different approaches you can take. For example,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;gathering more features&lt;/li&gt;&lt;li&gt;acquiring more data (often expensive)&lt;/li&gt;&lt;li&gt;altering the algorithm (learning rate, bias adjustment, etc)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Social dance was awesome. Learned some basic swing dance moves. Super light hearted, fun, instructor is great. A great way to relax. Two of my other good friends are in the class as well.&lt;/p&gt;&lt;p&gt;Bitcoin class is fantastic as well. Really going into the theory of the bitcoin protocol itself. Dan Boneh being a crypto guy, likes being rigorous and it's really enlightening and fun.&lt;/p&gt;&lt;p&gt;Talked about binding commitments and digital signatures. Merkle trees. Wow!&lt;/p&gt;&lt;p&gt;Expect some posts about these topics. It'll help me learn them.&lt;/p&gt;
</description>
<pubDate>
Mon, 21 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-14-solving-problems.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-14-solving-problems.html
</link>
<title>
Solving Problems
</title>
<description>
&lt;p&gt;These are my notes on Rich Hickey's Talk &lt;a href='https://www.youtube.com/watch?v=f84n5oFoZBc'&gt;&quot;Hammock Driven Development&quot;&lt;/a&gt;. It distills his experience in the methodology of coding/problem solving and even psychology.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;State the problem. What are you solving with this software?&lt;/li&gt;&lt;li&gt;Understand the problem.&lt;ul&gt;&lt;li&gt;what do you know?&lt;ul&gt;&lt;li&gt;facts&lt;/li&gt;&lt;li&gt;context&lt;/li&gt;&lt;li&gt;constraints&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;what do you not know?&lt;/li&gt;&lt;li&gt;are there related problems?&lt;ul&gt;&lt;li&gt;number one way to get up to speed with current progress.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;write it all down&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Be discerning&lt;ul&gt;&lt;li&gt;not everything is awesome.&lt;/li&gt;&lt;li&gt;find problems in your own solutions.&lt;ul&gt;&lt;li&gt;solve those too&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;look for tradeoffs&lt;/li&gt;&lt;li&gt;write down your questions. Things you know you don't know.&lt;ul&gt;&lt;li&gt;there should be question marks&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Look around&lt;ul&gt;&lt;li&gt;read about and around your space.&lt;/li&gt;&lt;li&gt;other people around trying to do the same thing.&lt;/li&gt;&lt;li&gt;be extremely critical at other solutions.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Tradeoffs&lt;ul&gt;&lt;li&gt;need two or more possible solutions to say it's a tradeoff&lt;/li&gt;&lt;li&gt;write them down.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Focus&lt;ul&gt;&lt;li&gt;on a hammock, nobody knows you're not sleeping.&lt;/li&gt;&lt;li&gt;computer is prime source of distraction.&lt;/li&gt;&lt;li&gt;you can't do everything. emails will be not responded to.&lt;/li&gt;&lt;li&gt;let loved ones know you will be &quot;gone&quot;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Waking Mind&lt;ul&gt;&lt;li&gt;good at critical thinking&lt;ul&gt;&lt;li&gt;analysis&lt;/li&gt;&lt;li&gt;tactics&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;finds local maxima&lt;/li&gt;&lt;li&gt;use waking time to feed work to background mind.&lt;ul&gt;&lt;li&gt;and to analyze its products&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;Background Mind&lt;ul&gt;&lt;li&gt;good at making connections&lt;ul&gt;&lt;li&gt;syntehsis&lt;/li&gt;&lt;li&gt;strategy&lt;/li&gt;&lt;li&gt;abstracts, analogizes&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;solves most non-trivial problems&lt;/li&gt;&lt;/ul&gt;Sleep makes memories stronger, and you remember the most important parts.Finds hidden relations among memories. Make it an agenda item for their background mind.&lt;/p&gt;&lt;p&gt;Can only focus on 7+/-2 things. write down proposed solutions, with pictures.&lt;/p&gt;&lt;p&gt;Work on multiple things at once. Capture the results of your background processes.&lt;/p&gt;&lt;p&gt;Usually code is small. You gain confidence during implementation.&lt;/p&gt;&lt;p&gt;You will be wrong, and you will think of better ideas. Also, the facts change. The requirements, too.&lt;/p&gt;&lt;p&gt;Don't be afraid to be wrong.&lt;/p&gt;
</description>
<pubDate>
Mon, 14 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-12-blue-crab-obx.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-12-blue-crab-obx.html
</link>
<title>
Crabbing with Emotion Graph
</title>
<description>
&lt;p&gt;Chilling at the Outer Banks (NC natives abbreviate it OBX) for a bit before going back to Stanford! I've visited OBX countless times, and the one thing I've always wanted to do when coming here is go crabbing. It's one of those things I did once as a child (maybe when I was 7 or 8?) and have since always romanticized.&lt;/p&gt;&lt;p&gt;This time, we actually did it! We bought a pretty big crab trap for $20 some rope to haul in the trap, and some super cheap chicken for bait. Excitement level: 8/10.&lt;/p&gt;&lt;p&gt;We head out to a dock on the sound side of OBX that I think is actually owned by a waterfront restaurant (lol). Drop the trap in. Expectations: 10/10.&lt;/p&gt;&lt;p&gt;We were making casual bets on how many crabs we'd have when we hauled the trap up. Dad thought 3 or more (teaming with crabs lol), Mom thought 1 or 2, and I didn't quite know what to expect. Maybe a couple.&lt;/p&gt;&lt;p&gt;Waited like 10 minutes, hauled the trap up, and we got... nothing. Wow. Give it another 10. So we all just sat on the pier/deck, checking our phones/tablets. Classic.&lt;/p&gt;&lt;p&gt;10 minutes. Oh look, there's one! Pretty neat. Excitement level: 5/10. A little low because this wasn't nearly as fun as the crabbing I'd done before (we tied drumsticks to a wire and hauled them in. So exciting!). It wasn't even as fun as fishing, because you don't get the rush of excitement when you feel something tug on your pole. But still, a catch. Something to smile about.&lt;/p&gt;&lt;p&gt;Maybe waited about another 20 minutes, and got kind of impatient. Waiting with no possibility of huge excitement isn't that fun. So, we went and actually ate at the restaurant whose deck we were using. It was kind of overpriced, so I don't feel at all bad about using their pier to catch crabs. Contentness: 7/10.&lt;/p&gt;&lt;p&gt;We sat at a place where we could see our trap from the window. A family went over to the pier and actually lifted our trap out of the water! Nervousness: 4/10. Not too worried cause like, why would they really bother to take our stuff?&lt;/p&gt;&lt;p&gt;Regardless, Dad went to check on the trap. Upon returning, we were informed &quot;There are two! And the second is about 30% larger than the first!&quot; Nice. So about 1 crab per 30 minutes. You know, we should really eat slower. Amusement level: 7/10.&lt;/p&gt;&lt;p&gt;We slowly finished eating, talked a little, and resumed our tech savvy game (read: everyone on their mobile devices). I got a little bored and took out my computer to play around with ClojureScript on Node.js. Anticipation level: 0/10. Calm as ever :)&lt;/p&gt;&lt;p&gt;Parents eventually got out of the restaurant and informed me that they were going home to get a bucket for the crabs. Cool, some more time to play with code. Satisfaction: guaranteed.&lt;/p&gt;&lt;p&gt;The lady at the front of the restaurant kept on glaring at me because I was sitting in the waiting area to charge my computer while coding. Guilt level: 1/10. Whatever dude, I already ate at your restaurant. I'mma code.&lt;/p&gt;&lt;p&gt;Parents return, so we check the trap. Still two. Sigh. Oh well, put em in the bucket! Slight worry about how to get them out of the trap, but Dad just picked them up. Excitement level: 8/10.&lt;/p&gt;&lt;p&gt;We went over to Manteo (a town on an island between the mainland and OBX) to continue crabbing there, as we saw some dude catch a crab there earlier in the day. We were also hoping for luck as it was already dark outside, and blue crabs should be nocturnal.&lt;/p&gt;&lt;p&gt;We actually couldn't find the pier we wanted to be at in the dark. And in NC, it gets really dark (yes, I'm looking at you, California/Bay Area. Too many people, too many lights). As in, you hold your hand up to your face and you can't see it. You can however, hear a symphony of a couple thousand of bugs. #allnatural. North Carolina pride: over 9000.&lt;/p&gt;&lt;p&gt;So, we went over to Manteo's town pier/lighthouse thingy, and found a nice place to cast our trap there. It was well lit (which should help attract crabs) and quite a pleasant town with some bustlingness. That's a word. Happiness level: 9/10.&lt;/p&gt;&lt;p&gt;Mom tells us to look at a sign on the pier that said there could be contamination. It warned people to not eat clams, mussels, or oysters in the area as it could cause serious disease (presumably due to contamination). Uhhhh what? It was a nice place though, and we thought it was possible that the sign was just to stop fishermen, who can be a nuisance to a nice-ish place. Worry level: 5/10.&lt;/p&gt;&lt;p&gt;We dilly dallied for a bit, waiting for stuff to happen. We actually got a tiny crab in the trap within a couple minutes, but it wasn't worth trying to keep. Threw the trap back in the water. Later, Dad checked the trap again and said the baby crap somehow escaped, and that we had two catfish. Wut? (Actually, there are quite a few crab trap go-pro videos on Youtube and it's pretty common for fish to swim into the trap). We wait more. Parents took a walk, I continued to play with code.&lt;/p&gt;&lt;p&gt;We eventually got tired, so I called Dad to tell him we should just get the trap and go home. Parents were already like half a mile away so I packed my stuff and brought it out on the pier. Pulled the trap up, and voila! There were two decently large crabs! Very nice. We had two buckets so I dumped them into the second bucket, so we could know which were possibly contaminated. Satisfaction: 8/10. Satisfaction very high relative to prior performance, pulled down because I was hoping to catch a few more today.&lt;/p&gt;&lt;p&gt;Dad came back and asked me why I put them in separate buckets and immediately poured the new bucket into the old one. Classic. Worry level: 3/10. Ehhh, these crabs are probably fine. I hand Dad the wire I so neatly folded. Super proud of my work there. lol r u srs level: 10/10.&lt;/p&gt;&lt;p&gt;Came home and proceeded to wash the crabs. This was fun: we found some giant tongs to move the crabs between the bucket and the sink while washing. Enjoyment level: 11/10.  Took a couple videos and snapchats of the experience. Because that's what matters in life... If you click the tongs in front of an aggressive crab, it'll try to fight you. Amusement level: 11/10.&lt;/p&gt;&lt;p&gt;Mom prepared boiling water with sliced ginger (gets rid of fishy taste, super common Chinese cooking technique for shellfish) and some sliced ginger in vinegar for dipping (also a pretty distinctly Chinese style of eating crab). Apparently crab is of cold nature and ginger is of warm nature so you need to eat ginger with crab to balance it out. The vinegar is just for kicks because I absolutely love vinegar. Or maybe not, I don't claim to know Chinese medicine or common Chinese health knowledge or whatever it is. I just eat stuff.&lt;/p&gt;&lt;p&gt;Next came actually killing the crabs. Anticipation level: 3/10. Remember it being easy peezy trivial. Throw em in, they instantly become orange, voila: ready to eat.&lt;/p&gt;&lt;p&gt;Wasn't so simple in practice. Ideally you grab the crabs from the butt so they can't claw at your tongs. However, the crab's body is angled such that the butt is angled downwards and it's hard to pick them up that way. So, I picked them up from the head side, and started moving them into the vat of boiling water that would be their death.&lt;/p&gt;&lt;p&gt;The first guy clawed on to my tong. Half of it got boiled and the other half was moving, until I somehow broke it loose and shoved it into the water when it became motionless. Fun level: 1/10. Guilt level: 8/10. Solemn level: 10/10. Rest in peace dude.&lt;/p&gt;&lt;p&gt;Those emotions lasted for all of maybe half a second. Time for the next one. Otherwise, they'll cook for different times and nobody wants to deal with that. This dude clawed on as well, and when I pushed him in the boiling water, both his claws fell off. Wut? Actually kind of concerned here. Asked my dad about it. &quot;What, they've been fighting you all day, why would you expect his claws to stay on?&quot; ...Ok... Discomfort/uneasiness/dirtyness level: rose from 1 to 3/10.&lt;/p&gt;&lt;p&gt;The rest of them eventually got boiled, one way or another. I was ready for anything at this point. Cooked em for 10 minutes, hauled em out, two per plate. Plate 1: crabs had green stuff along its seams, smelled kinda funky/fishy. Plate 2: crabs were orange all the way across, smelled great. Hmm, I think I know which one was contaminated! But I boiled them all in the same pot. Regret level: 5/10. Should have boiled them separately. Eh, whatever.&lt;/p&gt;&lt;p&gt;Wanted to throw the two green crabs away, but knew my Dad would get mad at me if I did. His perspective is we spent hours on those two dudes and you shouldn't waste them, as that is equivalent to wasting your effort and disrespecting your time. My perspective is I don't want to risk getting sick. His perspective is that they came out of the water, were robust, and were fine. My perspective is, this seems like a super common type of argument I've had with my Dad. Solution? I threw them away.  Uneasiness level: 6/10. Yes, sloppily killing animals that I'm about to eat is less uncomfortable for me than human tension is. I happen to care about humans more than I do about other animals. Especially so if I am going to eat those animals anyways.&lt;/p&gt;&lt;p&gt;Start eating the crab. Took off all the legs and pried the body open. Ugh, this guck. Disgust level: 4/10. I'd been pampered by living in Maine and dealing with lobster tails -- all meat, no guts. Same experience with shrimp: no guts.&lt;/p&gt;&lt;p&gt;Finally cracked open a piece of meat on the side of the crab. Holy cow, this is the same meat that they use in crab cakes! *Dips it in vinegar/ginger. Wow. Sweet, delicious, and oh so satisfying. (yes, fresh blue crab meat is like lobster but sweet.) Guilt from killing the crabs: evaporated. Too happy, I forgot about it.&lt;/p&gt;&lt;p&gt;Offered crab to parents who were preparing to sleep. Denied -- they were preparing to sleep. Oh well. Overall feeling: happy, tasty, satisfying. The discomfort and work associated with it probably made it all the better. Experience was so good I decided to write a post about it.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Just let out a super disgusting fart. Regret level: oops, digestion. Hope those weren't contaminated! Eh, I should be fine. :)&lt;/p&gt;
</description>
<pubDate>
Sat, 12 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-11-cljs-js-interop.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-11-cljs-js-interop.html
</link>
<title>
ClojureScript JavaScript Interop
</title>
<description>
&lt;p&gt;If you've tried ClojureScript, chances are you've had to figure out how to interop with JavaScript. And chances are, after a quick Google search you found &lt;a href='http://www.spacjer.com/blog/2014/09/12/clojurescript-javascript-interop/'&gt;Rafal's comprehensive guide&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This post will cover my favorite tool when dealing with JS interop that isn't covered in Rafal's post: the threading macro &lt;code&gt;-&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;As a bonus it'll also cover my preferred interop syntax as well as a link to an additional nifty (yet possibly over-eager) JS interop library.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;threading&amp;#95;macro&quot;&gt;&lt;/a&gt;The Threading Macro&lt;/h3&gt;&lt;p&gt;Usually, you read Clojure code &quot;inside out&quot;. The threading macro re-orders the the form to read left-to-right... like JavaScript does!&lt;/p&gt;&lt;p&gt;Suppose you need to integrate the &lt;a href='http://harvesthq.github.io/chosen/'&gt;chosen&lt;/a&gt; jquery plugin into your ClojureScript to have nicer looking select elements:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$&amp;#40;&amp;quot;.chosen-select&amp;quot;&amp;#41;.chosen&amp;#40;{disable&amp;#95;search&amp;#95;threshold: 10}&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could write&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;.chosen &amp;#40;js/$ &amp;quot;.chosen-select&amp;quot;&amp;#41; #js {&amp;quot;disable&amp;#95;search&amp;#95;threshold&amp;quot; 10}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, with the threading macro, you can write&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;-&amp;gt; &amp;#40;js/$ &amp;quot;.chosen-select&amp;quot;&amp;#41; &amp;#40;.chosen #js {&amp;quot;disable&amp;#95;search&amp;#95;threshold&amp;quot; 10}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To me, that reads far, far clearer and a lot more like the original code. Everything appears in the same order as the original JavaScript.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;preferred&amp;#95;interop&amp;#95;syntax&quot;&gt;&lt;/a&gt;Preferred Interop Syntax&lt;/h3&gt;&lt;p&gt;&lt;a href='http://www.spacjer.com/blog/2014/09/12/clojurescript-javascript-interop/'&gt;Rafal's guide&lt;/a&gt; gives you a lot of options on how to do interop which be a little overwhelming. In this section I'll give a consistent interop solution that is my current preferred method. My goal is to make the interop as readable as possible while doing its best to follow an idiomatic Clojure style.&lt;/p&gt;&lt;p&gt;Without further ado, let's look at the interop operations you need to do: (the examples are taken from Rafal).&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;creating&amp;#95;objects&quot;&gt;&lt;/a&gt;Creating Objects&lt;/h4&gt;&lt;p&gt;Use the trailing dot syntax.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def t1 &amp;#40;js/MyType.&amp;#41;&amp;#41; ;; namespace.t1 = new MyType;
&amp;#40;def t2 &amp;#40;js/MyComplexType. &amp;quot;Bob&amp;quot;&amp;#41;&amp;#41; ;; namespace.t2 = new MyComplexType&amp;#40;&amp;quot;Bob&amp;quot;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;invoking&amp;#95;methods&quot;&gt;&lt;/a&gt;Invoking Methods&lt;/h4&gt;&lt;p&gt;My choice here is debatable, but I prefer the code reading in the same order as JavaScript for most method invocation.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;-&amp;gt; js/window .hello&amp;#41; ;; window.hello&amp;#40;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case it would obviously be more idiomatic to make the function the first item in the s-exp, but again, having to constantly switch &lt;em&gt;how you read the code&lt;/em&gt; is annoying.&lt;/p&gt;&lt;p&gt;Suppose you are integrating the chosen jquery component, and on the first line you use the threading macro (reading ltr) and the next line you're calling a function in idiomatic Clojure (reading rtl) and on the next line you again use the threading macro (ltr again!). In my experience that's quite dizzying, so I'll recommend sticking to the threading macro here unless you just have a random one-off line of interop.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;accessing&amp;#95;properties&quot;&gt;&lt;/a&gt;Accessing Properties&lt;/h4&gt;&lt;p&gt;You should be familiar with the &lt;code&gt;aget&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; syntax because you'll see them in the wild, but my recommendation is... to again use the threading macro!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;-&amp;gt; js/object .-prop1 .-prop2 .-prop3&amp;#41; ;; object.prop1.prop2.prop3;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next best option is &lt;code&gt;aget&lt;/code&gt;, which you'll need to use if you want dynamically property access. Do it like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;aget js/object &amp;quot;prop1&amp;quot; &amp;quot;prop2&amp;quot; &amp;quot;prop3&amp;quot;&amp;#41; ;; object&amp;#91;&amp;quot;prop1&amp;quot;&amp;#93;&amp;#91;&amp;quot;prop2&amp;quot;&amp;#93;&amp;#91;&amp;quot;prop3&amp;quot;&amp;#93;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;assignment&quot;&gt;&lt;/a&gt;Assignment&lt;/h4&gt;&lt;p&gt;Now we enter the brutal, mutable world where anything goes. Use &lt;code&gt;set!&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;set! &amp;#40;-&amp;gt; my-type .-name&amp;#41; &amp;quot;Andy&amp;quot;&amp;#41; ;; namespace.my&amp;#95;type.name = &amp;quot;Andy&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;arrays&quot;&gt;&lt;/a&gt;Arrays&lt;/h4&gt;&lt;p&gt;Your only choice here is to use &lt;code&gt;aget&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;aget js/globalArray 0&amp;#41; ;; globalArray&amp;#91;0&amp;#93;
&amp;#40;-&amp;gt; &amp;#40;-&amp;gt; js/document 
        &amp;#40;.querySelectorAll &amp;quot;.list-item&amp;quot;&amp;#41;&amp;#41; 
    &amp;#40;aget 1&amp;#41;&amp;#41; ;; document.querySelectorAll&amp;#40;&amp;quot;.list-item&amp;quot;&amp;#41;&amp;#91;1&amp;#93;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Maybe the second example is a little over-kill with threading macro happiness, but I really find it more readable when your head is in JS-land.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;nested&amp;#95;scopes&quot;&gt;&lt;/a&gt;Nested Scopes&lt;/h4&gt;&lt;p&gt;Your only choice is to use the non-idiomatic dot-syntax.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def m1 &amp;#40;js/Microsoft.Maps.Themes.BingTheme.&amp;#41;&amp;#41; ;; new Microsoft.Maps.Themes.BingTheme;
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;converting&amp;#95;data&quot;&gt;&lt;/a&gt;Converting Data&lt;/h4&gt;&lt;p&gt;Just use &lt;code&gt;clj-&amp;gt;js&lt;/code&gt; and &lt;code&gt;js-&amp;gt;clj&lt;/code&gt;. These are super simple and I'll direct you to Rafal for these. Only thing I would add is to use &lt;code&gt;#js&lt;/code&gt; reader macro if you're doing a super quick and dirty flat map or array.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;other&amp;#95;resources&quot;&gt;&lt;/a&gt;Other Resources&lt;/h3&gt;&lt;p&gt;If you look online, you might also encounter the  &lt;a href='http://purnam.github.io/purnam/'&gt;purnam library&lt;/a&gt;. I've looked at it and used it a little bit, and I think it's really convenient. However, I think it's a little too eager to replace existing cljs-js interop that is already very readable (especially when you use the threading macro!) making you have to learn a whole new interop syntax. &lt;/p&gt;&lt;p&gt;Essentially, I'm not terribly excited about purnam core, but the other namespaces contain things that could be very useful.&lt;/p&gt;&lt;p&gt;In the future, I'll write &lt;a href='/blog/pages/todo.html#cljs externs'&gt;a post&lt;/a&gt; about calling external JavaScript from ClojureScript when using the Google Closure compiler on advanced optimizations via an externs file. As a bonus, I'll also cover how to call ClojureScript from JavaScript using metadata.&lt;/p&gt;
</description>
<pubDate>
Fri, 11 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-9-6-zero-to-one.review.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-9-6-zero-to-one.review.html
</link>
<title>
On Zero To One (part 1)
</title>
<description>
&lt;p&gt;&lt;strong&gt;Warn: Post in progress&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I've been reading Peter Thiel's &lt;a href='http://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296'&gt;Zero to One&lt;/a&gt;  this summer, and want to note my thoughts on it. First and foremost, I believe the main value of the book is &lt;em&gt;not&lt;/em&gt; from its specific startup tips or advice. If you want that, go read Paul Graham's &lt;a href='http://www.paulgraham.com/articles.html'&gt;essays&lt;/a&gt;  or Sam Altman's &lt;a href='http://blog.samaltman.com/'&gt;blog&lt;/a&gt;. Better yet, follow them on Twitter (@paulg and @sama).&lt;/p&gt;&lt;p&gt;Instead, the ideas in the book are valuable because they describe a &lt;em&gt;way of thinking&lt;/em&gt;.  For example, the book describes Thiel's mindset when approaching a variety of topics, from business to economics to politics to the value of college, etc. But most importantly, the book describes Thiel's mindset on the advancement of humanity (or what he calls &quot;technology&quot;, or &quot;the future&quot;). To me, it seems that the book is roughly 80% about mindset and 20% about concrete advice &lt;a href='#0'&gt;&amp;#91;0&amp;#93;&lt;/a&gt;. In other words, it's about &lt;em&gt;how&lt;/em&gt; one thinks &lt;a href='#0.5'&gt;&amp;#91;0.5&amp;#93;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;First off, a couple questions.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;should&amp;#95;you&amp;#95;read&amp;#95;this&amp;#95;book?&quot;&gt;&lt;/a&gt;Should you read this book?&lt;/h4&gt;&lt;p&gt;Yes.&lt;/p&gt;&lt;p&gt;A friend told me he hadn't read the book yet because he thought Peter Thiel was too radical and somewhat of a hypocrite (Why is he encouraging kids to drop out of college when he has so many Stanford degrees? How can he speak out against competition when he benefitted so much from the capitalist system? &lt;a href='#1'&gt;&amp;#91;1&amp;#93;&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Even if you are in this camp, you should read the book. Why? Zero To One  is akin to a book on mathematics in the sense that Thiel starts with one key assumption/axiom, and then describes many theorems, results, and corollaries that one should logically believe if they hold the starting assumption to be true. And what's his driving assumption? It's that going from Zero to One, or making new technology where none existed before, is &lt;strong&gt;the most important thing&lt;/strong&gt; for people to do. I think this is a premise that many would in fact be sympathetic towards, so in reading Zero to One, the reader gets to see a simple premise driven to its logical extreme on the many topics that Thiel discusses. The conclusions Thiel draws then lead one to reflect on their mindset towards those topics, even if Thiel's conclusions seem extreme at the outset. If you are interested in Thiel's premise and its implications, reading this book will do a lot of detailed thinking for you and springboard you into a place where you can decide first what you believe about his view-points and second what you actually think about his starting premise.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;why&amp;#95;this&amp;#95;post?&quot;&gt;&lt;/a&gt;Why this post?&lt;/h4&gt;&lt;p&gt;This post aims to describe&lt;/p&gt;&lt;ol&gt;&lt;li&gt;the key surprising results from the book&lt;/li&gt;&lt;li&gt;how these results affect one's mindset&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Surprising results, are (unsurprisingly) ideas that don't play nicely with conventional knowledge. To that end, I'll try to avoid lots of discussion on the pretty widely accepted ideas in the book in this post, (such as &quot;have a 10x advantage in either technology, network effects, economies of scale, or branding&quot;) even though they might be very useful rules of thumb. In a later post I might reflect on some of Thiel's interesting yet more &quot;conventional&quot; advice.&lt;/p&gt;&lt;p&gt;Before I begin I should state a caveat: I'm not necessarily interested in the absolute truth. Rather, I'm interested in what type of mindset will make me the most effective. When these two things don't coincide, I actually seek the latter. This is generally my philosophy &lt;a href='/blog/pages/todo.html#chess religion'&gt;in chess&lt;/a&gt;, and in many instances, &lt;a href='/blog/pages/todo.html#spinning top'&gt;in life&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;eyebrow&amp;#95;raisers&quot;&gt;&lt;/a&gt;Eyebrow raisers&lt;/h3&gt;&lt;p&gt;Below are Thiel's claims that I found most surprising. These are from chapters 1-8. Hopefully I get around to writing a part two which will cover the remainder of the book.&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;courage&amp;#95;over&amp;#95;genius&quot;&gt;&lt;/a&gt;Courage over genius&lt;/h5&gt;&lt;p&gt;First page of the first chapter:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Brilliant thinking is rare, but courage is in even shorter supply than genius. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;What's he talking about? The argument is that it is often more difficult to have a strong vision/belief about the future than it is to be brilliant in an academic sense. &lt;a href='#2'&gt;&amp;#91;2&amp;#93;&lt;/a&gt; &lt;a href='#3'&gt;&amp;#91;3&amp;#93;&lt;/a&gt; Indeed, intellectuals feel comfort in the pursuit of brilliance because academics is rational and (to some extent) provable. They feel accomplishment because many of their findings are technically difficult, and as a side benefit, possibly useful &lt;a href='#4'&gt;&amp;#91;4&amp;#93;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However, there are societal pressures to not have a bold vision. People commonly say that &quot;ideas are worthless, execution is everything&quot; (especially on Quora, good gracious people). People justify not having a concrete plan for a product because they're going to iterate on it, and it's now viewed as OK &lt;a href='#5'&gt;&amp;#91;5&amp;#93;&lt;/a&gt;. And, worshippers of genius will always say that someone smarter &quot;out there&quot; is working on it, so why waste the effort and get humiliated?&lt;/p&gt;&lt;p&gt;However, Thiel argues the most reliable way to make a change to the future is to have a bold vision of the future and a plan to accomplish it. In other words, to be courageous. Elon Musk's ventures (SpaceX, Tesla) are a great example of what I think Thiel would call courage.&lt;/p&gt;&lt;p&gt;There is no doubt that you need to have a good enough understanding of the world to be in a position in which your courageous vision has any meaning, but this leads one to question if we learn in pursuit of genius for genius's sake or if we learn to eventually make a difference. And a follow up question is if our academic community encourages us to be courageous and take such risks, or if it strongly warns against it, making us abandon our larger, ambitious plans as we learn more and more.&lt;/p&gt;&lt;p&gt;Think for yourself, and dare to dream. The future won't create itself, and so the future depends on it.&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;avoid&amp;#95;competition&quot;&gt;&lt;/a&gt;Avoid competition&lt;/h5&gt;&lt;p&gt;Maybe it's a little disingenuous for me to include this as an argument that &quot;surprises&quot; me, because it's  &lt;!-- wisdom that my dad imparted to me long ago and is --&gt;  a claim &lt;a href='/blog/pages/todo.html#hs, and bake your own pie'&gt;that I already strongly sympathize with&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However, Thiel has a novel and clear justification for why competition is terrible, and sheds light on many areas of competition that I haven't considered before.&lt;/p&gt;&lt;p&gt;The argument is that on the spectrum from pure competition to perfect monopoly, something with monopolistic character is a far better structure for innovation. How is this possible?&lt;/p&gt;&lt;p&gt;In a world of perfect competition, nobody can make a profit &amp;mdash; nobody wins. Why? Because every penny earned must be reinvested into the business. Otherwise, your competitors will reinvest in their businesses and you will lose. In perfect competition, the only thing you can worry about is the competition, and as a result, you become enslaved to staying alive. Money becomes the only thing that matters. You work as hard as you possibly can and turn exactly 0 profit. How depressing. It's truly a good thing perfect competition doesn't exist. It would drive me insane.&lt;/p&gt;&lt;p&gt;In contrast, a monopoly has no competition to deal with. Thus, they may freely spend their resources to investigate new things. In a monopoly, money is not everything. A monopoly with intentions of building the future just views money as a tool to help them do so.&lt;/p&gt;&lt;p&gt;Thiel also notes that very few businesses fall in the middle of the spectrum between competition and monopoly. Instead, businesses are either shackled to competition or have a monopoly. Then why doesn't it seem that way? Because people enslaved to fierce competition don't want to say that they have an undifferentiated product, while people in monopoly don't want to get investigated. Thus, each party tries to fool you into thinking they are neither in competition nor in monopoly, while the reality is much more binary.&lt;/p&gt;&lt;p&gt;Comparing these two extremes, it is pretty clear that you would rather be in a business on the more monopolistic side of the spectrum to feed innovation. That means avoiding competitive spaces.&lt;/p&gt;&lt;p&gt;Unfortunately, our cultural bias for competition is deeply rooted. Competition is at the heart of academics, sports, politics, and even biology (evolution).  Many adore competition for competition's sake. Everybody wants to win. However, competition often has us focusing on making tiny, incremental improvements to old ideas, not create new ones. Competition often makes one focus on non-impactful, non-essential things.&lt;/p&gt;&lt;p&gt;Thiel gives the example of Google and Microsoft. Both were giants in their time. However, for some odd reason, Microsoft wanted to compete with Google's search engine by rolling out Bing. It spent lots of time, resources, and marketing on this move, which was completely unrelated to their core product. It also offered no substantial improvements on Google search. Later, Google spent lots of money, time and effort trying to compete with Microsoft Office with Google Docs. In the meanwhile, Apple, who was competing with neither of them and focusing on its own vision of the future, surpassed both companies in monopolistic style.&lt;/p&gt;&lt;p&gt;Why did Google and Microsoft start a war with each other, diverting their energy and resources to make minor differentiators to existing products instead of actually making bold innovations (and thus allowing Apple to surpass both of them)? Thiel doesn't answer this but I think it's due to two core human emotions: fear and jealousy. Each was afraid that they were missing out on some other opportunity and diverted focus from their core product to get what somebody else had. That's competition. And it hurt them.&lt;/p&gt;&lt;p&gt;Of course, just as one shouldn't love competition for competition's sake, one shouldn't hate competition just to feel contrarian. Focusing back on the original claim that going from zero to one is the most important thing to do, we should focus on whatever actually adds new value to the world. It is possible that some competitions, such as the space race, actually did add value to humanity. And those are battles worth fighting. However, have clarity of mind, and understand that many, many battles are not worth fighting (and that non-competitive settings often allow you to better focus on what's actually valuable). If you win a useless battle just because you're in love with winning, I argue that you haven't won at all &lt;a href='#6'&gt;&amp;#91;6&amp;#93;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;!-- - Axel's thing with the popcorn bag. --&gt;&lt;/p&gt;&lt;p&gt;What does this all mean for our mindset? &lt;strong&gt;Focus on what's valuable and escape the competition!&lt;/strong&gt;&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;don't&amp;#95;disrupt&quot;&gt;&lt;/a&gt;Don't Disrupt&lt;/h5&gt;&lt;p&gt;Although this is strictly a corollary of the &quot;escape competition&quot; idea, I figure the terminology of &quot;disrupting an industry&quot; is prevalent enough that it deserves its own short section.&lt;/p&gt;&lt;p&gt;Thinking of oneself as a &quot;disruptor&quot; in an industry makes one understand their business in an inherently competitive way. Instead, the act of creation is far more important than trying to annoy the incumbents.&lt;/p&gt;&lt;p&gt;Instead of going for &quot;disruption&quot; which is a zero-sum game, create something new and generate new value. That allows you to escape the competition as much as possible.&lt;/p&gt;&lt;p&gt;To drive the point home, I believe you should redefine yourself as something new, and &lt;strong&gt;not&lt;/strong&gt; through the lens of some existing company. Yes, that means goodbye to &quot;we're the X for Y&quot;. (&lt;a href='https://www.youtube.com/watch?v=le4rd8B37fk'&gt;Uber for Tinder&lt;/a&gt;. what??).  And yes, that means I do get slightly annoyed when a friend calls my idea an &quot;X for Y&quot;. &lt;a href='/blog/pages/todo.html#stories and viewpoints'&gt;Some stories are more important than others&lt;/a&gt;.&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;startups&amp;#95;aren't&amp;#95;all&amp;#95;about&amp;#95;speed&quot;&gt;&lt;/a&gt;Startups aren't all about speed&lt;/h5&gt;&lt;p&gt;It turns out that a simple cash flow analysis shows that a majority of the value generated by a growing startup will be not be reaped until 10-15 years after it's founded. Speed is important to help you survive at the beginning, but to create a large amount of lasting value, you need to figure out how to be durable. &lt;/p&gt;&lt;p&gt;What does that mean for mindset? If you have high hopes for a company you're starting, also expect to sink at least 10-15 years into it. Despite everybody only planning a couple of months ahead and thinking about the short term, it would be wise to have an idea of where you want to be in 5 years and then work backwards to create milestones to see how you'll reach that place.&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;the&amp;#95;power&amp;#95;law&quot;&gt;&lt;/a&gt;The power law&lt;/h5&gt;&lt;p&gt;Pareto's principle states that 80% of the effects come from 20% of the causes &lt;a href='#7'&gt;&amp;#91;7&amp;#93;&lt;/a&gt;. Many results follow a power law. It is well known among VCs that the success of companies follows a power law. Perhaps more subtly (and a little more uncomfortable) is the idea that the skills and contributions of people also probably follow a power law.&lt;/p&gt;&lt;p&gt;What does the power law mean for our mindset? It means that one should have conviction. &lt;/p&gt;&lt;p&gt;If the power law is actually true, it means that it is unwise for VCs to diversify for the sake of diversification in the name of &quot;hedging&quot; and &quot;risk mitigation&quot;. Instead, they should try to identify companies they believe will be the most successful, and invest heavily in them to get maximal returns. According to Thiel, the best VCs invest in as few companies as possible.&lt;/p&gt;&lt;p&gt;What does the power law mean for individuals? Avoid diversifying and hedging among many options. Don't dabble in everything. Rather, squint hard and try to determine what will really take off, and then run with it. Why? Because you can't really diversify your life to hedge against uncertainty. It doesn't make sense to run a dozen companies and see which flies, or have a dozen equally viable alternate career paths on reserve to see which flies.&lt;/p&gt;&lt;p&gt;This proposition is surprising because it's the opposite of what we learn in school. We're instructed to be well rounded, and each subject is devoted the same amount of time/attention. Thiel argues that it absolutely matters what you do, because the success of the career you choose likely also follows a power law. First determine if what you're doing will be valuable in the future, and then focus relentlessly on that. This will yield the best results.&lt;/p&gt;&lt;p&gt;Block out the noise, don't envy other people, and have focus.&lt;/p&gt;&lt;h5&gt;&lt;a name=&quot;you&amp;#95;can&amp;#95;control&amp;#95;the&amp;#95;future&quot;&gt;&lt;/a&gt;You can control the future&lt;/h5&gt;&lt;p&gt;TODO: This was probably the hardest chapter to think about...&lt;/p&gt;&lt;p&gt;On design over &quot;speed&quot; or &quot;iteration&quot; https://www.youtube.com/watch?v=f84n5oFoZBc&lt;/p&gt;&lt;p&gt;&lt;!-- What is true now that was an over-reaction from the past? But you must work for it! It's not gonna come to you for free. The premise of going from 0 to 1 is being able to act upon important secrets/hidden opportunities. --&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt; &lt;p id=&quot;0&quot;&gt; [0] The chessic way of thinking about it is that Thiel has written a book on strategy rather than tactics. However, in chess books strategy is often illustrated and backed by tactics, and Thiel does provide concrete case studies and specific advice (such as CEOs of early stage venture backed startups should have a salary of at most $150,000) to back his points. So there is a case to be made saying that Thiel really offers his advice on both mindset and concrete actions. It's just that I find the mindset aspect most unique to this book. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;0.5&quot;&gt; [0.5] What the book is about straight from the horse's mouth: &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; This book is about the questions you must ask and answer to succeed in the business of doing new things: what follows is not a manual or a record of knowledge but an exercise in thinking. (11)  &lt;/p&gt;&lt;/blockquote&gt;&lt;p id=&quot;1&quot;&gt; [1] In fact, Peter Thiel argues competition and capitalism are complete opposites. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;2&quot;&gt; [2] I've witnessed the power of courage and a plan first hand. Friend A had an idea for a startup that friends B and C were initially skeptical of. However, A showed an insistance, conviction, and belief that his idea would work, and was able to convince B and C (both vastly more experienced developers than A) to work with him on his idea. I later asked B why he decided to work with A. He replied that &quot;he had nothing better to work on, and he wanted to give A's idea a try. After all, A had strong belief the idea would work and a plausible plan to get it done. It was better to work on something than nothing.&quot; In fact, I am confident B could have come up with the same idea independently. But B would have rejected it due to uncertainty, doubt, and lack of conviction. It took A's conviction and plan to get B to commit. It was courage, not brilliance, that got the venture off the ground. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;3&quot;&gt; [3] Some might replace Thiel's &quot;courage&quot; with &quot;passion&quot;, or &quot;conviction&quot;. In Stanford's MS&amp;E178 (The Spirit of Entrepreneurship) our teacher Ravi Belani claimed that the decision to start a startup was not a rational affair, but rather an act driven by something irrational: passion to solve a problem. I would probably agree, especially if I were optimizing for the metric of my personal net worth. If I took Thiel's philosophy, however, and was trying to optimize for the best way to build the future, perhaps being courageous and deciding to start a startup is perfectly rational. In fact, it may well be the most pragmatic choice you have as an individual if you want to build the future. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;4&quot;&gt; [4] Perhaps this is harsh, but I do get the sense that &quot;rigor&quot; or &quot;novelty&quot; are far more important than actual utility in a lot of science. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;5&quot;&gt; [5] And depending on the product or the market, maybe it is ok, but please think about it before assuming it's fine to allow iteration to solve all your problems. &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;6&quot;&gt; [6] In high school we had this game called spoons. The gist of the game is that each person gets a spoon and a target to &quot;kill&quot;. To &quot;kill&quot; someone, you tap your spoon on your target's shoulder when they are not holding their spoon to their nose. The kid who won this game was the one who held a dirty plastic spoon to his/her nose for weeks upon weeks. They would suffer to win this game &quot;for the glory of it all&quot;, but my question is, in doing so, &lt;em&gt;did they really win&lt;/em&gt;? &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;p id=&quot;7&quot;&gt; [7] Pareto showed that 80% of the land in Italy was owned by about 20% of the people. He developed the principle by observing that 20% of his pea pods produced 80% of the peas. In business, it is often true that 20% of the clients generate 80% of the sales. &lt;/p&gt;&lt;/p&gt;
</description>
<pubDate>
Sun, 06 Sep 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-10-momentum-vs-burnout.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-10-momentum-vs-burnout.html
</link>
<title>
Momentum vs. Burnout
</title>
<description>
&lt;p&gt;Observe the following tweet storm by Sam Altman.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/blog/img/sama-momentum.png&quot; alt=&quot;sama tweet storm&quot; /&gt;&lt;/p&gt;&lt;p&gt;I've found this to be super true, and it is a specific case of what I believe to be a larger truth/way of life.&lt;/p&gt;&lt;p&gt;It's something my dad has repeatedly harked at me, and it's this: keep on winning.&lt;/p&gt;&lt;p&gt;Yeah, it sounds ridiculous. How can &quot;keep on winning&quot; be a way of life?&lt;/p&gt;&lt;p&gt;I believe it's a choice. It's a choice to consciously ask the right questions and strive for the right goals in order to make small successes happen over and over, and to build upon them.&lt;/p&gt;&lt;p&gt;The most obvious context for this statement is in programming. My dad told me a lot of coding is just getting a &quot;hello world&quot; to work over and over and scaffolding up from there. Almost all functions are just some fancy &quot;hello world&quot; in one way or another.&lt;/p&gt;&lt;p&gt;But the idea is more universal than just its applications to how one creates something through code. And while we're lost &quot;in the fray&quot; or in the &quot;heat of battle&quot;, the fundamental truth that you must keep on winning is often lost in favor of other things. In fact, my theorem that you must  &lt;a href='/blog/pages/todo.html#move more to be stable'&gt;keep on moving&lt;/a&gt; is probably a corollary of the law that you should keep on winning.&lt;/p&gt;&lt;p&gt;Success reinforces itself. Success is a possibility opener. Getting small results that you want out of your work is the best way to alleviate burnout. It keeps you aligned with your goals. Why? Because you have something to show for your toil. For me, burnout is when I am so tired of my work that I lose sight of why I'm working in the first place. Why would I lose sight? Because I have seemingly no progress. The road is long, I've worked so hard, and I've barely moved. I can't see things coming together. I didn't keep on winning. Winning bolsters your investment hypothesis and keeps you excited and passionate about your work.&lt;/p&gt;&lt;p&gt;Success is something that you can scaffold upon. It brings you to a place where you can think about new ideas and fresher problems. It's a possibility opener that really gets you excited about your investment.&lt;/p&gt;&lt;p&gt;In some way, Rich's talk &lt;a href='http://www.infoq.com/presentations/Simple-Made-Easy'&gt;Simple Made Easy&lt;/a&gt; also endorses this view, but from a different angle. In a nutshell, his notion of &quot;easy&quot; being &quot;nearby&quot; affirms that you must keep on winning. The more you win, the closer you get, and the easier it gets. I'll write  &lt;a href='/blog/pages/todo.html#simple made easy = win more'&gt;a post&lt;/a&gt; about it.&lt;/p&gt;
</description>
<pubDate>
Mon, 10 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-6-clojure-algo.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-6-clojure-algo.html
</link>
<title>
Clojure Recursive Backtracking
</title>
<description>
&lt;p&gt;I recently shadowed an interview with the following interview question:&lt;/p&gt;&lt;p&gt;Suppose you are given a vector of strings, such as&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;&amp;quot;t&amp;#42;itt&amp;#42;r&amp;quot; &amp;quot;&amp;#42;s&amp;quot; &amp;quot;&amp;#42;wesome&amp;quot;&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; a &quot;bag o' characters&quot;, such as&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z&amp;#93;
 &lt;/code&gt;&lt;/pre&gt; and a list of valid words, such as the ones found in &lt;code&gt;/usr/dict/words&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Your task is to find &lt;strong&gt;all&lt;/strong&gt; the ways to replace the &lt;code&gt;&amp;#42;&lt;/code&gt; characters (in the vector of strings) with ones from the bag o' characters to create valid words. Each character in the &quot;bag&quot; can only be used once.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Before you continue&lt;/strong&gt;: try solving this on your own (even though I've given away that it's backtracking recursion)! It's a cute little problem. Also, the rest of the post is written with the assumption that you've given the problem some thought, so...&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;journey&amp;#95;to&amp;#95;a&amp;#95;solution&quot;&gt;&lt;/a&gt;Journey to a Solution&lt;/h3&gt;&lt;p&gt;Upon hearing this problem and trying to solve it during the interview, I was dismayed to realize that I essentially forgot recursive backtracking from fall quarter of freshman year and had to re-work it out afterwards. In particular, I thought during the interview that the recursive function needed to be able to &quot;undo&quot; state.&lt;/p&gt;&lt;p&gt;Anyways, upon hearing the problem, I decided to implement a solution in Clojure, because&lt;/p&gt;&lt;ol&gt;&lt;li&gt;I'm trying to learn this language&lt;/li&gt;&lt;li&gt;It seemed like a great tool to solve this type of problem cleanly&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So, I went back to my desk and fired up a new Clojure project and tried to work it out.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;The first thing I did was generate a trie from the words for fast prefix checking as that'll obviously prune the possibilities down quite a bit. This wasn't really in the scope of the interview so I just found an implementation of building tries on &lt;a href='stackoverflow.com/questions/1452680/clojure-how-to-generate-a-trie'&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns yang.trie
  &amp;#40;:gen-class&amp;#41;&amp;#41;

&amp;#40;defn add-to-trie &amp;#91;trie x&amp;#93;
  &amp;#40;assoc-in trie x &amp;#40;merge &amp;#40;get-in trie x&amp;#41;  
                          {:val x :terminal true}&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn in-trie? &amp;#91;trie x&amp;#93;
  &amp;quot;Returns true if x exists in the trie&amp;quot;
  &amp;#40;:terminal &amp;#40;get-in trie x&amp;#41; false&amp;#41;&amp;#41;

&amp;#40;defn has-prefix? &amp;#91;trie prefix&amp;#93;
  &amp;quot;Returns whether the prefix exists in the trie&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; prefix
       &amp;#40;get-in trie&amp;#41;
       nil?
       not&amp;#41;&amp;#41;

&amp;#40;defn prefix-matches &amp;#91;trie prefix&amp;#93;
  &amp;quot;Returns a list of all words in the trie with the prefix&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; prefix
       &amp;#40;get-in trie&amp;#41;
       &amp;#40;tree-seq map? vals&amp;#41;
       &amp;#40;map :val&amp;#41;
       &amp;#40;remove nil?&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn build-trie &amp;#91;coll&amp;#93;
  &amp;quot;Builds a trie over the values in the specified seq coll&amp;quot;
  &amp;#40;reduce add-to-trie {} coll&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And to actually build the trie:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn build-lexicon &amp;#91;file&amp;#93;
  &amp;#40;-&amp;gt; file
      slurp
      string/split-lines
      trie/build-trie&amp;#41;&amp;#41; ; so readable!

&amp;#40;defonce lexicon &amp;#40;build-lexicon &amp;quot;/usr/share/dict/words&amp;quot;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now it's time to start recursive backtracking to find all the solutions (if any). On my first pass at a Clojure solution, I made a couple of bad decisions and made my life difficult.&lt;/p&gt;&lt;p&gt;The problems were two-fold. First of all, I got the wrong idea by choosing the wrong data structure. &lt;strong&gt;This was a huge lesson learned: choosing the right data structure, especially in Clojure, is absolutely critical.&lt;/strong&gt; When people say that programming Clojure will make you a better programmer in general, I think this is one of the things they're referring to. Clojure really makes you realize that in order to keep your life simple and sane,  it's generally the case that &lt;strong&gt;data is more important than functions&lt;/strong&gt;. That's because coaxing data back and forth between formats due to poor data structure choice is annoying, introduces a ton of opportunities for bugs, and is not even core to the algorithmic complexity of the problem.&lt;/p&gt;&lt;p&gt;Secondly, I really wasn't familiar enough with the Clojure control structures and data manipulation functions. So I had to spend a lot of time surfing the docs  to try to figure out how to shovel my data around to do what I wanted.&lt;/p&gt;&lt;p&gt;So what was my not-so-bright data structure? I thought it would be convenient to immediately decimate all the &lt;code&gt;&amp;#42;&lt;/code&gt; characters by splitting each string in the vector by &lt;code&gt;&amp;#42;&lt;/code&gt;. In code,&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;map #&amp;#40;string/split % #&amp;quot;\&amp;#42;&amp;quot;&amp;#41; words&amp;#41;
;=&amp;gt; &amp;#40;&amp;#91;&amp;quot;t&amp;quot; &amp;quot;itt&amp;quot; &amp;quot;r&amp;quot;&amp;#93; &amp;#91;&amp;quot;&amp;quot; &amp;quot;s&amp;quot;&amp;#93; &amp;#91;&amp;quot;&amp;quot; &amp;quot;wesome&amp;quot;&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; However, as a beginner in Clojure, dealing with the vectors nested in the list gave me a lot of headaches. Even worse, I also didn't actually know exactly what &lt;code&gt;string/split&lt;/code&gt; did, so when I toiled my way to a first solution and tried to test a case with adjacent &lt;code&gt;&amp;#42;&lt;/code&gt;'s, the output was literally just wrong.&lt;/p&gt;&lt;p&gt;Let's see how bad this was. First, consider the final function I wrote that does the recursive backtracking.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn solve &amp;#91;words chars-remaining&amp;#93;
  &amp;quot;words: vector of strings
  chars-remaining: map from characters to frequencies&amp;quot;
  &amp;#40;if &amp;#40;solved? words&amp;#41;
    &amp;#40;apply println words&amp;#41;
    &amp;#40;doseq &amp;#91;ch &amp;#40;keys chars-remaining&amp;#41;&amp;#93; ;the side effect is the possible println in the recursion
      &amp;#40;if &amp;#40;is-prefix? words ch&amp;#41;
        &amp;#40;solve &amp;#40;replace-char words ch&amp;#41;
               &amp;#40;remove-char chars-remaining ch&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that we need:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;solved&lt;/code&gt;: a fn to check if the words vector has been solved (updated such that each string it contains is a valid word)&lt;/li&gt;&lt;li&gt;&lt;code&gt;is-prefix?&lt;/code&gt;: a fn to check if inserting a character at the next available &lt;code&gt;&amp;#42;&lt;/code&gt; results in a valid prefix&lt;/li&gt;&lt;li&gt;&lt;code&gt;replace-char&lt;/code&gt;: a fn to actually insert a character at the next available &lt;code&gt;&amp;#42;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;remove-char&lt;/code&gt;: a fn to remove a char from the frequency map of remaining characters&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Besides the fact that it took me awhile to figure out that all I needed for backtracking recursion was the above logical structure (no undo necessary) the hardest part of using the string split data-structure was implementing functions 2 and 3.&lt;/p&gt;&lt;p&gt;As an example of how my code looked when using the wrong datastructure, here's how I tried to do part of fn 3 the first time around. Notice that it doesn't even look for the first instance of a word that has a &lt;code&gt;&amp;#42;&lt;/code&gt;. The function's just trying to replace a &lt;code&gt;&amp;#42;&lt;/code&gt; with a character:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn stitch &amp;#91;word-frag ch&amp;#93;
  &amp;#40;if &amp;#40;&amp;gt; &amp;#40;count word-frag&amp;#41; 1&amp;#41;
    &amp;#40;assoc
      &amp;#40;-&amp;gt; word-frag rest vec&amp;#41;
      0
      &amp;#40;str &amp;#40;word-frag 0&amp;#41; ch &amp;#40;word-frag 1&amp;#41; ; absolutely disgusting
    word-frag&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here's how I tried to do fn 1:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn solved? &amp;#91;words&amp;#93;
  &amp;#40;reduce &amp;#40;fn &amp;#91;truth &amp;#91;next-word&amp;#93;&amp;#93; ;at least I used destructuring...
              &amp;#40;and &amp;#40;trie/in-trie? lexicon next-word&amp;#41; truth&amp;#41;
          true words&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Look away, look away. These are absolutely disgusting. The usage of the threading macro (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is pretty cringe-worthy, and the whole thing is a mess. Notice also that there is a lot of poop shovelling to be done to &quot;clear out&quot; the first two elements of the word fragment vector and prepend the joined string. (or, as in my implementation above, chop off the first element and replace the second with the joined string). The poor data structure choice just makes life so unclean.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;solved?&lt;/code&gt; function also suffers from the data structure choice.  As a side note, using &lt;code&gt;reduce&lt;/code&gt; there works, but is pretty jank.&lt;/p&gt;&lt;p&gt;My first bug-ridden implementation had plenty more atrocities, but to spare you and to save my face, we'll move on to my second pass solution, which is quite clean and was quick to write.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;clean&amp;#95;solution&quot;&gt;&lt;/a&gt;The Clean Solution&lt;/h3&gt;&lt;p&gt;As discussed, we just need to implement 4 functions to get this algo working. &lt;code&gt;solved?&lt;/code&gt;, &lt;code&gt;is-prefix&lt;/code&gt;, &lt;code&gt;replace-char&lt;/code&gt;, and &lt;code&gt;remove-char&lt;/code&gt;. For the clean solution, I'll just leave the vector of words be, with &lt;code&gt;&amp;#42;&lt;/code&gt;s and all. Here are the functions one by one.&lt;/p&gt;&lt;p&gt;1) &lt;code&gt;solved?&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- solved? &amp;#91;words&amp;#93;
  &amp;quot;words: a vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words 
       &amp;#40;map #&amp;#40;trie/in-trie? lexicon %&amp;#41;&amp;#41;
       &amp;#40;every? true?&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Wowzers that's so much better! I just map the values of the words to a vector of booleans, and return true if every value is true!&lt;/p&gt;&lt;p&gt;2) &lt;code&gt;replace-char&lt;/code&gt; (this is actually required by &lt;code&gt;is-prefix?&lt;/code&gt; so I'll show it first)&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- replace-char &amp;#91;words ch&amp;#93;
  &amp;quot;words: a vector of strings
  ch: a character&amp;quot;
  &amp;#40;if-let &amp;#91;word-idx &amp;#40;find-word-with-missing words&amp;#41;&amp;#93; ; continue when word-idx not nil
    &amp;#40;let &amp;#91;word &amp;#40;nth words word-idx&amp;#41;&amp;#93;
      &amp;#40;assoc words 
             word-idx
             &amp;#40;string/replace-first word &amp;quot;&amp;#42;&amp;quot; ch&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Here, we get the index of the word with a missing character (using &lt;code&gt;find-word-with-missing&lt;/code&gt;, which I'll define below), grab that word from the word vector, and replace the &lt;code&gt;&amp;#42;&lt;/code&gt; in that word with &lt;code&gt;ch&lt;/code&gt; using the built-in &lt;code&gt;string/replace-first&lt;/code&gt;. Super simple!&lt;/p&gt;&lt;p&gt;And here's &lt;code&gt;find-word-with-missing&lt;/code&gt;:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- find-word-with-missing &amp;#91;words&amp;#93;
  &amp;quot;words: a vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words
      &amp;#40;util/indices #&amp;#40;util/substring? % &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41;
      first&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; it simply returns the index of the first word that contains &lt;code&gt;&amp;#42;&lt;/code&gt; as a substring. (There are actually 2 additional helper methods used here, which are)&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;; in namespace yang.util

&amp;#40;defn substring? &amp;#91;st sub&amp;#93;
  &amp;#40;not= &amp;#40;.indexOf st sub&amp;#41; -1&amp;#41;&amp;#41; ;know your Java strings!
  
&amp;#40;defn indices &amp;#91;pred coll&amp;#93;
  &amp;#40;keep-indexed #&amp;#40;when &amp;#40;pred %2&amp;#41; %1&amp;#41; coll&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;3) &lt;code&gt;is-prefix?&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- is-prefix? &amp;#91;words ch&amp;#93;
  &amp;quot;words: vector of strings
  ch: character&amp;quot;
  &amp;#40;if-let &amp;#91;check-idx &amp;#40;find-word-with-missing words&amp;#41;&amp;#93;
    &amp;#40;let &amp;#91;replaced-char &amp;#40;replace-char words ch&amp;#41;
          check-word &amp;#40;str &amp;#40;nth replaced-char check-idx&amp;#41; &amp;quot;&amp;#42;&amp;quot;&amp;#41; ;hack to fix edge case
          prefix &amp;#40;subs check-word 0 &amp;#40;.indexOf check-word &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41;&amp;#93;
      &amp;#40;trie/has-prefix? lexicon prefix&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This one is probably the hairiest function I have, and yet it's still quite understandable. In words, what it's doing is after you've already replaced the first &lt;code&gt;&amp;#42;&lt;/code&gt; with a new character, it figures out if the prefix (a substring from the beginning of the word up until the next &lt;code&gt;&amp;#42;&lt;/code&gt; character or the end of the word) is a prefix in the trie.&lt;/p&gt;&lt;p&gt;In code: first, you grab the index of the first word with a missing character (if such a word exists). Then, in the &lt;code&gt;let&lt;/code&gt; form, you bind &lt;code&gt;replaced-char&lt;/code&gt; to the vector where you've already inserted the char &lt;code&gt;ch&lt;/code&gt;. Now, you want to get the right prefix, which is all the characters from the beginning of the word up to the next &lt;code&gt;&amp;#42;&lt;/code&gt; or the end of the word. I solved this problem by just appending a &lt;code&gt;&amp;#42;&lt;/code&gt; to the end of the word, so the prefix substring is always correct. Finally, just check if the trie has that prefix. Voila.&lt;/p&gt;&lt;p&gt;4) &lt;code&gt;remove-char&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- remove-char &amp;#91;chars-remaining ch&amp;#93;
  &amp;quot;chars-remaining: a map from characters to frequencies
  ch: a character&amp;quot;
  &amp;#40;let &amp;#91;new-map &amp;#40;update-in chars-remaining &amp;#91;ch&amp;#93; dec&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;zero? &amp;#40;new-map ch&amp;#41;&amp;#41;
      &amp;#40;dissoc new-map ch&amp;#41;
      new-map&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; This one just removes a character from the bag by decrementing the value of the character's key. It also cleans up the map by removing the key if a character's frequency is 0.&lt;/p&gt;&lt;p&gt;And that's it!&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Here are the results for a couple of inputs:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def words &amp;#91;&amp;quot;twi&amp;#42;t&amp;#42;&amp;#42;&amp;quot; &amp;quot;i&amp;#42;&amp;quot; &amp;quot;a&amp;#42;es&amp;#42;&amp;#42;e&amp;quot;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;twinter id amesite
twinter id awesome
twinter if amesite
twinter if awesome
twinter io amesite
twinter is amesite
twinter is awesome
twinter it awesome
twisted if amesite
twisted if awesome
twisted in amesite
twisted in awesome
twisted io amesite
twisted it awesome
twister id amesite
twister id awesome
twister if amesite
twister if awesome
twister in amesite
twister in awesome
twister io amesite
twister it awesome
twistle id amesite
twistle id awesome
twistle if amesite
twistle if awesome
twistle in amesite
twistle in awesome
twistle io amesite
twistle it awesome
twitten id awesome
twitten if awesome
twitten is awesome
twitter id awesome
twitter if awesome
twitter in awesome
twitter is awesome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check out the last entry of that one :). And another example?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def words &amp;#91;&amp;quot;twi&amp;#42;&amp;#42;&amp;#42;&amp;#42;&amp;quot; &amp;quot;i&amp;#42;&amp;quot; &amp;quot;a&amp;#42;es&amp;#42;&amp;#42;e&amp;quot;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;twifold ie amesite
twifold in amesite
twifold is amesite
twigful id amesite
twigful id awesome
twigful ie amesite
twigful ie awesome
twigful in amesite
twigful in awesome
twigful io amesite
twigful is amesite
twigful is awesome
twigful it awesome
twiglet id awesome
twiglet if awesome
twiglet in awesome
twiglet is awesome
twindle if amesite
twindle if awesome
twindle io amesite
twindle is amesite
twindle is awesome
twindle it awesome
twingle id amesite
twingle id awesome
twingle if amesite
twingle if awesome
twingle io amesite
twingle is amesite
twingle is awesome
twingle it awesome
twinkle id amesite
twinkle id awesome
twinkle if amesite
twinkle if awesome
twinkle io amesite
twinkle is amesite
twinkle is awesome
twinkle it awesome
twinkly id amesite
twinkly id awesome
twinkly ie amesite
twinkly ie awesome
twinkly if amesite
twinkly if awesome
twinkly io amesite
twinkly is amesite
twinkly is awesome
twinkly it awesome
twinter id awesome
twinter if awesome
twinter is awesome
twiscar id amesite
twiscar id awesome
twiscar ie amesite
twiscar ie awesome
twiscar if amesite
twiscar if awesome
twiscar in amesite
twiscar in awesome
twiscar io amesite
twiscar it awesome
twisted if awesome
twisted in awesome
twister id awesome
twister if awesome
twister in awesome
twistle id awesome
twistle if awesome
twistle in awesome
twitchy id awesome
twitchy ie awesome
twitchy if awesome
twitchy in awesome
twitchy is awesome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeah, all those 2 letter thingies are in the Unix dictionary.&lt;/p&gt;&lt;p&gt;And note that &lt;code&gt;twitter&lt;/code&gt; doesn't appear in the second version because we can't repeat usage of &lt;code&gt;t&lt;/code&gt;'s.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Believe it or not, the final code you saw above is nearly what I wrote on the first pass with the  simpler data structure! I did very little debugging to get my &quot;first-draft&quot; code to  what you've just seen.&lt;/p&gt;&lt;p&gt;The reason is because the code &lt;strong&gt;just reads declaratively&lt;/strong&gt;. Really the only bug I encountered was not installing the &lt;code&gt;if-let&lt;/code&gt; forms, because I forgot that &lt;code&gt;find-word-with-missing&lt;/code&gt; could return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And, as a bonus optimization because I'm using Clojure, I memoized (aka cached) the results to the &lt;code&gt;find-word-with-missing&lt;/code&gt; function! What the &lt;code&gt;memoize&lt;/code&gt; builtin function does is  store a map of your function inputs and saves your function output, so if the function is computationally expensive or is repeatedly called with the same arguments, it can return the cached copy of the output! For obvious reasons, you can only &lt;code&gt;memoize&lt;/code&gt; functions without side effects.&lt;/p&gt;&lt;p&gt;Here's how that looks:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- find-word-with-missing-slow &amp;#91;words&amp;#93;
  &amp;quot;words: vector of strings&amp;quot;
  &amp;#40;-&amp;gt;&amp;gt; words
      &amp;#40;util/indices #&amp;#40;util/substring? % &amp;quot;&amp;#42;&amp;quot;&amp;#41;&amp;#41; ;hard coding missing char...
      first&amp;#41;&amp;#41;

; check clojure docs for cache policies
&amp;#40;def find-word-with-missing 
  &amp;#40;memoize find-word-with-missing-slow&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; Super nice. I wish I had this in all languages.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;You can find all the code for this on &lt;a href='https://github.com/jiangts/blog/tree/master/code/yang/'&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;coming&amp;#95;up&amp;#95;next&quot;&gt;&lt;/a&gt;Coming up next&lt;/h3&gt;&lt;p&gt;I've also been using the &lt;a href='https://github.com/Day8/re-frame'&gt;re-frame&lt;/a&gt; ClojureScript client-side library and I think it's a fantastic idea, so I should be writing a post about that in the near future!&lt;/p&gt;
</description>
<pubDate>
Thu, 06 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-8-1-vim-nodejs-repl.html
</link>
<title>
ClojureScript Node.js vim repl
</title>
<description>
&lt;p&gt;There are lots of great &quot;plug-and-play&quot; setups for ClojureScript in the browser, like Figwheel and Chestnut. However, getting a good REPL environment for ClojureScript targeting Node.js seemed quite under-documented. After consulting numerous resources (many of which, uh, how should I say, may or may not have been really outdated), here's how I did it:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get a starter ClojureScript Project&lt;pre&gt;&lt;code&gt;$ lein new mies replicious
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Follow basic directions in the README.md&lt;ul&gt;&lt;li&gt;in particular, run &lt;code&gt;lein npm install&lt;/code&gt;&lt;/li&gt;&lt;li&gt;also just a note: if you try to run &lt;code&gt;./scripts/repl&lt;/code&gt; as advertised in the      README it won't work! To fix it, you need to alter the      &lt;code&gt;./scripts/repl.clj&lt;/code&gt; file by changing the function call from `(repl/repl*      ...)&lt;code&gt; to &lt;/code&gt;(repl/repl ...)`.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Include Cemerick's &lt;a href='https://github.com/cemerick/piggieback'&gt;piggieback&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Add this snippet to your &lt;code&gt;project.clj&lt;/code&gt;&lt;pre&gt;&lt;code&gt;:profiles  {:dev  {:dependencies  &amp;#91;&amp;#91;com.cemerick/piggieback &amp;quot;0.2.1&amp;quot;&amp;#93;
                                     &amp;#91;org.clojure/tools.nrepl &amp;quot;0.2.10&amp;quot;&amp;#93;&amp;#93;
                     :repl-options  {:nrepl-middleware  &amp;#91;cemerick.piggieback/wrap-cljs-repl&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;In the repl, do the following:&lt;pre&gt;&lt;code&gt;$ lein repl
...
user=&amp;gt; &amp;#40;require '&amp;#91;cljs.repl.node :as node&amp;#93;&amp;#41;
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;In fireplace, run&lt;pre&gt;&lt;code&gt;:Piggieback &amp;#40;node/repl-env&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Try it out!&lt;ul&gt;&lt;li&gt;One last roadblock I encountered was the issue described      &lt;a href='https://github.com/tpope/vim-fireplace/issues/220'&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;I fixed it by simply updating to the latest version of fireplace :) (almost      too easy!).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;I think this is actually the first time I've successfully gotten fireplace to connect to a ClojureScript repl. I remember having some trouble connecting fireplace to the browser repls provided by figwheel/chestnut, so in those environments, I just live reload stuff and observe the output of the web console. Fast enough, but I think this will be even better :).&lt;/p&gt;
</description>
<pubDate>
Sat, 01 Aug 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-31-sophomore-fall.html
</link>
<title>
Sophomore Fall
</title>
<description>
&lt;p&gt;It's time to choose classes at Stanford!&lt;/p&gt;&lt;p&gt;Unfortunately (fortunately?) there are too many cool CS classes to take at Stanford during the fall. Classes currently on my radar that are only offered fall quarter are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CS144 - Networking&lt;ul&gt;&lt;li&gt;in this class you basically learn how the internet works. It's inverted      classroom style, so you watch videos about theory at home and talk about      it in class. Having watched some videos out of curiosity, I can say that      they're really fascinating, and the professors do a great job detailing      the internet, one of the greatest engineering feats of modern technology.      The class is known to be one of the harder(est?) CS classes at Stanford      though, because you literally have to implement a lot of networking      protocols in C. I think the first assignment is writing a TCP server from      a provided bare-bones implementation of a UDP server. -- Really excited to      take this one!&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS251 - Bitcoin&lt;ul&gt;&lt;li&gt;This one is taught by Dan Boneh, (one of?) the world's greatest expert(s) on      computer security. I'm taking this one probably half because I want to      take a class with Dan and half because I think bitcoin is interesting      itself as a technology (and I want to know what the fuss is about, as I've      never actually looked into it).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS229 - Machine Learning&lt;ul&gt;&lt;li&gt;This was Andrew Ng's famous class, so I feel somewhat obligated as a      Stanford CS kid to take it.  It's actually known to not be the most      organized class (it had more students than CS106a last fall!) and I hear      some things are brushed over rather quickly, so it's imperative I put in      some extra time on learning the material if I actually want to know it.      But I still think it'll be super cool.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS221 - AI&lt;ul&gt;&lt;li&gt;A lot of older CS students told me to take this instead of 229, while others      told me it was a relatively easy class. In any case, I don't have space on      my schedule to take this class because it conflicts with 251, but I'll      definitely keep my ears perked to see what my friends have to say about      it. Who knows, I might even take a look at their problem sets or course      notes from time to time.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS131 - Computer Vision&lt;ul&gt;&lt;li&gt;This just sounds cool. Not many of my friends have talked about it, but I      think it would be super interesting. However, not tryna take 4 CS classes      this next quarter so it'll have to wait...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CS145 - Databases&lt;ul&gt;&lt;li&gt;I already took a databases class in HS where we talked about 6 normal      forms in relational databases and went over basic queries. We also talked      about NoSQL databases like MongoDB, Riak, HBase, and Neo4J, of which I've      only used PostgreSQL and MongoDB semi-extensively. We also learned about      the CAP theorem and ACID compliance and the pros and cons of various      databases, but at the end of the day it wasn't so rigorous as it was only      a HS class. Hopefully this class will bring some rigor into what I learned      before and teach me new things when I take it next year.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'm also looking at taking Social Dance which is one of the most highly demanded classes at Stanford, (aka click enroll at exactly midnight!) and Math110 which is Number Theory. I figured I had to throw a math class in there to keep me thinking rigorously. Also I miss math, as I only took 1 math class last year :(.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;So those are my plans for now, and I'll append an update to this post when I actually finalize my schedule!&lt;/p&gt;
</description>
<pubDate>
Fri, 31 Jul 2015 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</guid>
<link>
http://jiangts.github.io/blog/blog/posts/2015-7-30-setting-up.html
</link>
<title>
New Blog
</title>
<description>
&lt;p&gt;After writing quite a few &quot;private blogs&quot; (translate: journal entries) over the years, I've decided to start a public blog on Github.&lt;/p&gt;&lt;p&gt;I'm using &lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt; (rather than Jekyll or Hugo or whatever million other options there are out there) because I fell in love with Clojure. The setup was simple. Just run&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new cryogen blog
$ cd blog
$ lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will get you a static site up and running.&lt;/p&gt;&lt;p&gt;Now, instead of following the advice on setting up a Github page on the cryogen docs, I did the following (which I found easier to maintain):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;initial commit&amp;quot; # ensure git knows about your subtree dir
$ git subtree push --prefix resources/public/blog origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also create a little shell script (found &lt;a href='https://gist.github.com/cobyism/4730490'&gt;here&lt;/a&gt;) to help you do the deploy to gh-pages process.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/bin/sh
if &amp;#91; -z &amp;quot;$1&amp;quot; &amp;#93;
then
  echo &amp;quot;Which folder do you want to deploy to GitHub Pages?&amp;quot;
  exit 1
fi
git subtree push --prefix $1 origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in the future you can just run the script and pass in the proper directory!&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;customizing&amp;#95;the&amp;#95;theme&quot;&gt;&lt;/a&gt;Customizing the theme&lt;/h3&gt;&lt;p&gt;I'm a huge fan of David Nolen's talks and his &lt;a href='http://swannodette.github.io'&gt;blog&lt;/a&gt;, and having found another Cryogen &lt;a href='http://blog.jethrokuan.com/'&gt;user&lt;/a&gt;  who was uh, heavily inspired by (stole?) his blog's style, I decided to give it a go as well. The theme looks super simple, which is fitting for any Clojurist :).&lt;/p&gt;&lt;p&gt;The main hurdle I came across was when dealing with Selmer for the first time. Essentially, the issue is that the &quot;tags&quot; button should only be  highlighted when the url is &quot;/blog/tags.html&quot;, and I didn't know how to get the current URL.&lt;/p&gt;&lt;p&gt;After fumbling around for a bit, (ok, like 40 minutes), I finally decided to &quot;be brave&quot; (translate: not be a noob) and  &lt;a href='https://github.com/cryogen-project/cryogen-core/blob/master/src/cryogen&amp;#95;core/compiler.clj'&gt;dig the source&lt;/a&gt; to find what  parameters where exactly being passed to the template. And there it was, &lt;code&gt;uri&lt;/code&gt; (doh!).&lt;/p&gt;&lt;p&gt;So it turns out things are pretty simple. God bless open source :).&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;complaints&amp;#95;about&amp;#95;cryogen&quot;&gt;&lt;/a&gt;Complaints about Cryogen&lt;/h3&gt;&lt;p&gt;It appears that the markdown parser doesn't support the full markdown specification. For example, the horizontal lines had to be created with &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; rather than &lt;code&gt;---&lt;/code&gt;. Not a huge deal, but not so nice.&lt;/p&gt;&lt;p&gt;Also, creating a new theme was a bit weird as the structure doesn't follow the provided theme structures.  (to make a new theme I need to have a &lt;code&gt;dosynctemplates&lt;/code&gt; folder in addition to a &lt;code&gt;dosync&lt;/code&gt; folder?).&lt;/p&gt;&lt;p&gt;I'll try to submit some pull requests at some point if time permits...&lt;/p&gt;&lt;p&gt;But otherwise, a pleasant experience.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;Depending on how life goes, hopefully we'll be seeing more posts on coding, math, life at Stanford etc. in the future!&lt;/p&gt;
</description>
<pubDate>
Thu, 30 Jul 2015 00:00:00 -0700
</pubDate>
</item>
</channel>
</rss>
